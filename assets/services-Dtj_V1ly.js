window.APIService=class{static async fetchUsers(){try{UIUtils.showLoading("Loading user data...");const t=await fetch("".concat(CONFIG.apiUrl,"?action=getUsers"));if(!t.ok)throw new Error("Failed to fetch users data");const e=await t.json();appState.users=e.users.map(t=>({phoneNumber:String(t.phoneNumber).trim(),password:String(t.password).trim(),userType:String(t.userType||"").trim(),name:String(t.name||"").trim()})),appState.dataLoaded=!0,UIUtils.hideLoading()}catch(t){appState.users=MOCK_DATA.users,appState.dataLoaded=!0,UIUtils.hideLoading()}}static async fetchTAList(){try{UIUtils.showLoading("Loading TA list...");const t=await fetch("".concat(CONFIG.apiUrl,"?action=getTAs"));if(!t.ok)throw new Error("Failed to fetch TAs data");const e=await t.json();appState.taList=e.tas||[],UIUtils.hideLoading()}catch(t){appState.taList=MOCK_DATA.tas,UIUtils.hideLoading()}}static async fetchUserData(t){try{UIUtils.showLoading("Loading user profile...");const e=await fetch("".concat(CONFIG.apiUrl,"?action=getUserData&phone=").concat(t));if(!e.ok)throw new Error("Failed to fetch user data");const a=await e.json();if(a.user){appState.currentUserType=a.user.userType||"",appState.currentUserName=a.user.name||"",sessionStorage.setItem("userType",appState.currentUserType),sessionStorage.setItem("userName",appState.currentUserName);const t="".concat(appState.currentUserName," (").concat(appState.currentUserType,")");domElements.updateUserDisplays(t)}UIUtils.hideLoading()}catch(e){UIUtils.hideLoading()}}static async fetchTARatings(t){try{UIUtils.showLoading("Loading TA ratings...");const e=await fetch("".concat(CONFIG.apiUrl,"?action=getTARatings&taId=").concat(t));if(!e.ok)throw new Error("Failed to fetch TA ratings");const a=await e.json();return UIUtils.hideLoading(),a}catch(e){return UIUtils.hideLoading(),{status:"error",message:e.message,ratings:[]}}}static async submitRating(t){try{UIUtils.showLoading("Submitting rating...");const e=new URLSearchParams;e.append("action","submitRating"),Object.keys(t).forEach(a=>{e.append(a,t[a])});const a=await fetch("".concat(CONFIG.apiUrl,"?").concat(e.toString()));if(!a.ok)throw new Error("HTTP error! status: ".concat(a.status));const s=await a.json();return UIUtils.hideLoading(),s}catch(e){return UIUtils.hideLoading(),"TypeError"===e.name&&e.message.includes("Failed to fetch")?{status:"error",message:"Network error. Please check your internet connection and try again."}:{status:"error",message:"Submission failed: ".concat(e.message)}}}static async fetchExistingReviewPeriods(){try{UIUtils.showLoading("Loading existing reviews...");const t=await fetch("".concat(CONFIG.apiUrl,"?action=getReviewPeriods&taId=").concat(appState.selectedTAId,"&raterType=").concat(appState.currentUserType));if(!t.ok)throw new Error("Failed to fetch review periods");const e=((await t.json()).periods||[]).map(t=>({...t,startDate:DateUtils.formatDateStringCompact(t.startDate),endDate:DateUtils.formatDateStringCompact(t.endDate)}));appState.existingReviewPeriods=e,UIUtils.hideLoading()}catch(t){appState.existingReviewPeriods=[],UIUtils.hideLoading()}}};window.AuthManager=class{static async handleLogin(t,e){UIUtils.showLoading("Authenticating...");try{appState.dataLoaded||await APIService.fetchUsers();const a=appState.users.find(a=>String(a.phoneNumber).trim()===t&&String(a.password).trim()===e);if(a){appState.setCurrentUser(t,a.name,a.userType),appState.saveToSession();const e="".concat(appState.currentUserName," (").concat(appState.currentUserType,")");domElements.updateUserDisplays(e),EventHandlers.updateUserInfo(appState.currentUserName,appState.currentUserType);const s=document.getElementById("existingRatingDisplay");s&&s.remove();const r=document.getElementById("ratingControls");return r&&(r.style.display="none"),0===appState.taList.length&&(await APIService.fetchTAList(),TAManager.populateTADropdown()),UIUtils.hideLoading(),{success:!0}}return UIUtils.hideLoading(),{success:!1,message:"Invalid phone number or password"}}catch(a){return UIUtils.hideLoading(),{success:!1,message:"Login failed. Please try again."}}}static logout(){appState.clearSession(),appState.reset(),ScreenManager.showLogin()}static async checkExistingSession(){UIUtils.showLoading("Checking session...");if(appState.loadFromSession()){if(appState.currentUserType&&appState.currentUserName){const t="".concat(appState.currentUserName," (").concat(appState.currentUserType,")");domElements.updateUserDisplays(t),EventHandlers.updateUserInfo(appState.currentUserName,appState.currentUserType)}else await APIService.fetchUserData(appState.currentUserPhone);0===appState.taList.length&&APIService.fetchTAList().then(()=>{TAManager.populateTADropdown()}),UIUtils.hideLoading(),ScreenManager.showTASelection()}else UIUtils.hideLoading(),ScreenManager.showLogin()}};
//# sourceMappingURL=services-Dtj_V1ly.js.map
