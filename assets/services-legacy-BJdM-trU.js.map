{"version":3,"file":"services-legacy-BJdM-trU.js","sources":["../../js/api-service.js","../../js/auth-manager.js"],"sourcesContent":["// API Service Module\nclass APIService {\n    // Fetch users from Google Sheet\n    static async fetchUsers() {\n        try {\n            UIUtils.showLoading('Loading user data...');\n            \n            const response = await fetch(`${CONFIG.apiUrl}?action=getUsers`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch users data');\n            }\n            \n            const data = await response.json();\n            // Process the data to ensure consistent formatting\n            appState.users = data.users.map(user => ({\n                phoneNumber: String(user.phoneNumber).trim(),\n                password: String(user.password).trim(),\n                userType: String(user.userType || '').trim(),\n                name: String(user.name || '').trim()\n            }));\n            console.log('Users data loaded successfully');\n            appState.dataLoaded = true;\n            \n            UIUtils.hideLoading();\n        } catch (error) {\n            console.error('Error fetching users:', error);\n            // Fallback to mock data if API fails\n            appState.users = MOCK_DATA.users;\n            appState.dataLoaded = true;\n            \n            UIUtils.hideLoading();\n        }\n    }\n\n    // Fetch TAs list\n    static async fetchTAList() {\n        try {\n            UIUtils.showLoading('Loading TA list...');\n            \n            const response = await fetch(`${CONFIG.apiUrl}?action=getTAs`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch TAs data');\n            }\n            \n            const data = await response.json();\n            appState.taList = data.tas || [];\n            console.log('TA list loaded successfully');\n            \n            UIUtils.hideLoading();\n        } catch (error) {\n            console.error('Error fetching TAs:', error);\n            // Fallback to mock data if API fails\n            appState.taList = MOCK_DATA.tas;\n            \n            UIUtils.hideLoading();\n        }\n    }\n\n    // Fetch user data\n    static async fetchUserData(phone) {\n        try {\n            UIUtils.showLoading('Loading user profile...');\n            \n            const response = await fetch(`${CONFIG.apiUrl}?action=getUserData&phone=${phone}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch user data');\n            }\n            \n            const data = await response.json();\n            if (data.user) {\n                appState.currentUserType = data.user.userType || '';\n                appState.currentUserName = data.user.name || '';\n                \n                // Store in session\n                sessionStorage.setItem('userType', appState.currentUserType);\n                sessionStorage.setItem('userName', appState.currentUserName);\n                \n                const userInfo = `${appState.currentUserName} (${appState.currentUserType})`;\n                domElements.updateUserDisplays(userInfo);\n            }\n            \n            UIUtils.hideLoading();\n        } catch (error) {\n            console.error('Error fetching user data:', error);\n            UIUtils.hideLoading();\n        }\n    }\n\n    // Fetch ratings for a specific TA\n    static async fetchTARatings(taId) {\n        try {\n            UIUtils.showLoading('Loading TA ratings...');\n            \n            const response = await fetch(`${CONFIG.apiUrl}?action=getTARatings&taId=${taId}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch TA ratings');\n            }\n            \n            const data = await response.json();\n            UIUtils.hideLoading();\n            return data;\n        } catch (error) {\n            console.error('Error fetching TA ratings:', error);\n            UIUtils.hideLoading();\n            return { status: 'error', message: error.message, ratings: [] };\n        }\n    }\n\n    // Submit rating to Google Sheet\n    static async submitRating(ratingData) {\n        try {\n            UIUtils.showLoading('Submitting rating...');\n            \n            // Use GET request as primary method\n            const params = new URLSearchParams();\n            params.append('action', 'submitRating');\n            \n            // Add all rating data as URL parameters\n            Object.keys(ratingData).forEach(key => {\n                params.append(key, ratingData[key]);\n            });\n            \n            const response = await fetch(`${CONFIG.apiUrl}?${params.toString()}`);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const result = await response.json();\n            UIUtils.hideLoading();\n            return result;\n        } catch (error) {\n            console.error('GET request failed:', error);\n            UIUtils.hideLoading();\n            \n            // Provide more specific error messages\n            if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {\n                return { status: 'error', message: 'Network error. Please check your internet connection and try again.' };\n            }\n            \n            return { status: 'error', message: `Submission failed: ${error.message}` };\n        }\n    }\n\n    // Fetch existing review periods for a TA and user type\n    static async fetchExistingReviewPeriods() {\n        try {\n            UIUtils.showLoading('Loading existing reviews...');\n            \n            const response = await fetch(`${CONFIG.apiUrl}?action=getReviewPeriods&taId=${appState.selectedTAId}&raterType=${appState.currentUserType}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch review periods');\n            }\n            \n            const data = await response.json();\n            \n            // Normalize date formats for all periods\n            console.log(\"Fetched review periods:\", data.periods);\n            const normalizedPeriods = (data.periods || []).map(period => ({\n                ...period,\n                startDate: DateUtils.formatDateStringCompact(period.startDate),\n                endDate: DateUtils.formatDateStringCompact(period.endDate)\n            }));\n            \n            appState.existingReviewPeriods = normalizedPeriods;\n            \n            UIUtils.hideLoading();\n        } catch (error) {\n            console.error('Error fetching review periods:', error);\n            appState.existingReviewPeriods = [];\n            UIUtils.hideLoading();\n        }\n    }\n}\n\n// Export the APIService class\nexport { APIService };\n\n// For backward compatibility (can be removed later)\nwindow.APIService = APIService;\n","// Authentication Module\nclass AuthManager {\n    // Handle user login\n    static async handleLogin(phone, password) {\n        UIUtils.showLoading('Authenticating...');\n        \n        console.log('Attempting login with:', phone);\n        \n        try {\n            // First check if we have users data loaded\n            if (!appState.dataLoaded) {\n                await APIService.fetchUsers();\n            }\n            \n            const user = appState.users.find(u => \n                String(u.phoneNumber).trim() === phone && \n                String(u.password).trim() === password\n            );\n            \n            if (user) {\n                // Store login state and user data\n                appState.setCurrentUser(phone, user.name, user.userType);\n                \n                console.log('Login successful for:', user);\n                \n                // Save to session storage\n                appState.saveToSession();\n                \n                // Update UI\n                const userInfo = `${appState.currentUserName} (${appState.currentUserType})`;\n                domElements.updateUserDisplays(userInfo);\n                \n                // Update user dropdown info\n                EventHandlers.updateUserInfo(appState.currentUserName, appState.currentUserType);\n                \n                // Clear any existing rating displays from previous user\n                const existingRatingDisplay = document.getElementById('existingRatingDisplay');\n                if (existingRatingDisplay) {\n                    existingRatingDisplay.remove();\n                }\n                \n                // Hide rating controls if visible\n                const ratingControls = document.getElementById('ratingControls');\n                if (ratingControls) {\n                    ratingControls.style.display = 'none';\n                }\n                \n                // Load TA list if needed\n                if (appState.taList.length === 0) {\n                    await APIService.fetchTAList();\n                    TAManager.populateTADropdown();\n                }\n                \n                UIUtils.hideLoading();\n                return { success: true };\n            } else {\n                // Failed login\n                UIUtils.hideLoading();\n                return { success: false, message: 'Invalid phone number or password' };\n            }\n        } catch (error) {\n            console.error('Login error:', error);\n            UIUtils.hideLoading();\n            return { success: false, message: 'Login failed. Please try again.' };\n        }\n    }\n\n    // Logout function\n    static logout() {\n        appState.clearSession();\n        appState.reset();\n        ScreenManager.showLogin();\n    }\n\n    // Check for existing session\n    static async checkExistingSession() {\n        UIUtils.showLoading('Checking session...');\n        \n        const isLoggedIn = appState.loadFromSession();\n        \n        if (isLoggedIn) {\n            console.log('Session data found:', appState.getCurrentUser());\n            \n            // If user data is incomplete, fetch it\n            if (!appState.currentUserType || !appState.currentUserName) {\n                console.log('Incomplete user data, fetching from server...');\n                await APIService.fetchUserData(appState.currentUserPhone);\n            } else {\n                // Make sure to update UI with stored data\n                const userInfo = `${appState.currentUserName} (${appState.currentUserType})`;\n                domElements.updateUserDisplays(userInfo);\n                \n                // Update user dropdown info for existing session\n                EventHandlers.updateUserInfo(appState.currentUserName, appState.currentUserType);\n            }\n            \n            // Fetch TA list in background if not already loaded\n            if (appState.taList.length === 0) {\n                APIService.fetchTAList().then(() => {\n                    TAManager.populateTADropdown();\n                });\n            }\n            \n            UIUtils.hideLoading();\n            ScreenManager.showTASelection();\n        } else {\n            // If not logged in, show login screen\n            UIUtils.hideLoading();\n            ScreenManager.showLogin();\n        }\n    }\n}\n\n// Export the AuthManager class\nexport { AuthManager };\n\n// For backward compatibility (can be removed later)\nwindow.AuthManager = AuthManager;\n"],"names":["window","APIService","fetchUsers","UIUtils","showLoading","response","fetch","CONFIG","apiUrl","ok","Error","data","json","appState","users","map","user","phoneNumber","String","trim","password","userType","name","dataLoaded","hideLoading","error","MOCK_DATA","fetchTAList","taList","tas","fetchUserData","phone","currentUserType","currentUserName","sessionStorage","setItem","userInfo","domElements","updateUserDisplays","fetchTARatings","taId","status","message","ratings","submitRating","ratingData","params","URLSearchParams","append","Object","keys","forEach","key","toString","result","includes","fetchExistingReviewPeriods","selectedTAId","normalizedPeriods","periods","period","startDate","DateUtils","formatDateStringCompact","endDate","existingReviewPeriods","AuthManager","handleLogin","find","u","setCurrentUser","saveToSession","EventHandlers","updateUserInfo","existingRatingDisplay","document","getElementById","remove","ratingControls","style","display","length","TAManager","populateTADropdown","success","logout","clearSession","reset","ScreenManager","showLogin","checkExistingSession","loadFromSession","currentUserPhone","then","showTASelection"],"mappings":"wEAmLAA,OAAOC,WAlLP,MAEI,uBAAaC,GACT,IACIC,QAAQC,YAAY,wBAEpB,MAAMC,QAAiBC,MAAM,GAAGC,OAAOC,0BACvC,IAAKH,EAASI,GACV,MAAM,IAAIC,MAAM,8BAGpB,MAAMC,QAAaN,EAASO,OAE5BC,SAASC,MAAQH,EAAKG,MAAMC,IAAIC,IAAI,CAChCC,YAAaC,OAAOF,EAAKC,aAAaE,OACtCC,SAAUF,OAAOF,EAAKI,UAAUD,OAChCE,SAAUH,OAAOF,EAAKK,UAAY,IAAIF,OACtCG,KAAMJ,OAAOF,EAAKM,MAAQ,IAAIH,UAGlCN,SAASU,YAAa,EAEtBpB,QAAQqB,aACZ,CAAE,MAAOC,GAGLZ,SAASC,MAAQY,UAAUZ,MAC3BD,SAASU,YAAa,EAEtBpB,QAAQqB,aACZ,CACJ,CAGA,wBAAaG,GACT,IACIxB,QAAQC,YAAY,sBAEpB,MAAMC,QAAiBC,MAAM,GAAGC,OAAOC,wBACvC,IAAKH,EAASI,GACV,UAAUC,MAAM,4BAGpB,MAAMC,QAAaN,EAASO,OAC5BC,SAASe,OAASjB,EAAKkB,KAAO,GAG9B1B,QAAQqB,aACZ,CAAE,MAAOC,GAGLZ,SAASe,OAASF,UAAUG,IAE5B1B,QAAQqB,aACZ,CACJ,CAGA,0BAAaM,CAAcC,GACvB,IACI5B,QAAQC,YAAY,2BAEpB,MAAMC,QAAiBC,MAAM,GAAGC,OAAOC,mCAAmCuB,KAC1E,IAAK1B,EAASI,GACV,MAAM,IAAIC,MAAM,6BAGpB,MAAMC,QAAaN,EAASO,OAC5B,GAAID,EAAKK,KAAM,CACXH,SAASmB,gBAAkBrB,EAAKK,KAAKK,UAAY,GACjDR,SAASoB,gBAAkBtB,EAAKK,KAAKM,MAAQ,GAG7CY,eAAeC,QAAQ,WAAYtB,SAASmB,iBAC5CE,eAAeC,QAAQ,WAAYtB,SAASoB,iBAE5C,MAAMG,EAAW,GAAGvB,SAASoB,oBAAoBpB,SAASmB,mBAC1DK,YAAYC,mBAAmBF,EACnC,CAEAjC,QAAQqB,aACZ,CAAE,MAAOC,GAELtB,QAAQqB,aACZ,CACJ,CAGA,2BAAae,CAAeC,GACxB,IACIrC,QAAQC,YAAY,yBAEpB,MAAMC,QAAiBC,MAAM,GAAGC,OAAOC,mCAAmCgC,KAC1E,IAAKnC,EAASI,GACV,UAAUC,MAAM,8BAGpB,MAAMC,QAAaN,EAASO,OAE5B,OADAT,QAAQqB,cACDb,CACX,CAAE,MAAOc,GAGL,OADAtB,QAAQqB,cACD,CAAEiB,OAAQ,QAASC,QAASjB,EAAMiB,QAASC,QAAS,GAC/D,CACJ,CAGA,yBAAaC,CAAaC,GACtB,IACI1C,QAAQC,YAAY,wBAGpB,MAAM0C,EAAS,IAAIC,gBACnBD,EAAOE,OAAO,SAAU,gBAGxBC,OAAOC,KAAKL,GAAYM,QAAQC,IAC5BN,EAAOE,OAAOI,EAAKP,EAAWO,MAGlC,MAAM/C,QAAiBC,MAAM,GAAGC,OAAOC,UAAUsC,EAAOO,cAExD,IAAKhD,EAASI,GACV,MAAM,IAAIC,MAAM,uBAAuBL,EAASoC,UAGpD,MAAMa,QAAejD,EAASO,OAE9B,OADAT,QAAQqB,cACD8B,CACX,CAAE,MAAO7B,GAKL,OAHAtB,QAAQqB,cAGW,cAAfC,EAAMH,MAAwBG,EAAMiB,QAAQa,SAAS,mBAC9C,CAAEd,OAAQ,QAASC,QAAS,uEAGhC,CAAED,OAAQ,QAASC,QAAS,sBAAsBjB,EAAMiB,UACnE,CACJ,CAGA,uCAAac,GACT,IACIrD,QAAQC,YAAY,+BAEpB,MAAMC,QAAiBC,MAAM,GAAGC,OAAOC,uCAAuCK,SAAS4C,0BAA0B5C,SAASmB,mBAC1H,IAAK3B,EAASI,GACV,MAAM,IAAIC,MAAM,kCAGpB,MAIMgD,UAJarD,EAASO,QAII+C,SAAW,IAAI5C,IAAI6C,IAAM,IAClDA,EACHC,UAAWC,UAAUC,wBAAwBH,EAAOC,WACpDG,QAASF,UAAUC,wBAAwBH,EAAOI,YAGtDnD,SAASoD,sBAAwBP,EAEjCvD,QAAQqB,aACZ,CAAE,MAAOC,GAELZ,SAASoD,sBAAwB,GACjC9D,QAAQqB,aACZ,CACJ,GCvDJxB,OAAOkE,YApHP,MAEI,wBAAaC,CAAYpC,EAAOX,GAC5BjB,QAAQC,YAAY,qBAIpB,IAESS,SAASU,kBACJtB,WAAWC,aAGrB,MAAMc,EAAOH,SAASC,MAAMsD,KAAKC,GAC7BnD,OAAOmD,EAAEpD,aAAaE,SAAWY,GACjCb,OAAOmD,EAAEjD,UAAUD,SAAWC,GAGlC,GAAIJ,EAAM,CAENH,SAASyD,eAAevC,EAAOf,EAAKM,KAAMN,EAAKK,UAK/CR,SAAS0D,gBAGT,MAAMnC,EAAW,GAAGvB,SAASoB,oBAAoBpB,SAASmB,mBAC1DK,YAAYC,mBAAmBF,GAG/BoC,cAAcC,eAAe5D,SAASoB,gBAAiBpB,SAASmB,iBAGhE,MAAM0C,EAAwBC,SAASC,eAAe,yBAClDF,GACAA,EAAsBG,SAI1B,MAAMC,EAAiBH,SAASC,eAAe,kBAY/C,OAXIE,IACAA,EAAeC,MAAMC,QAAU,QAIJ,IAA3BnE,SAASe,OAAOqD,eACVhF,WAAW0B,cACjBuD,UAAUC,sBAGdhF,QAAQqB,cACD,CAAE4D,SAAS,EACtB,CAGI,OADAjF,QAAQqB,cACD,CAAE4D,SAAS,EAAO1C,QAAS,mCAE1C,CAAE,MAAOjB,GAGL,OADAtB,QAAQqB,cACD,CAAE4D,SAAS,EAAO1C,QAAS,kCACtC,CACJ,CAGA,aAAO2C,GACHxE,SAASyE,eACTzE,SAAS0E,QACTC,cAAcC,WAClB,CAGA,iCAAaC,GAKT,GAJAvF,QAAQC,YAAY,uBAEDS,SAAS8E,kBAEZ,CAIZ,GAAK9E,SAASmB,iBAAoBnB,SAASoB,gBAGpC,CAEH,MAAMG,EAAW,GAAGvB,SAASoB,oBAAoBpB,SAASmB,mBAC1DK,YAAYC,mBAAmBF,GAG/BoC,cAAcC,eAAe5D,SAASoB,gBAAiBpB,SAASmB,gBACpE,YARU/B,WAAW6B,cAAcjB,SAAS+E,kBAWb,IAA3B/E,SAASe,OAAOqD,QAChBhF,WAAW0B,cAAckE,KAAK,KAC1BX,UAAUC,uBAIlBhF,QAAQqB,cACRgE,cAAcM,iBAClB,MAEI3F,QAAQqB,cACRgE,cAAcC,WAEtB"}