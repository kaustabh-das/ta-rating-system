System.register([],function(e,t){"use strict";return{execute:function(){window.APIService=class{static async fetchUsers(){try{UIUtils.showLoading("Loading user data...");const e=await fetch(`${CONFIG.apiUrl}?action=getUsers`);if(!e.ok)throw new Error("Failed to fetch users data");const t=await e.json();appState.users=t.users.map(e=>({phoneNumber:String(e.phoneNumber).trim(),password:String(e.password).trim(),userType:String(e.userType||"").trim(),name:String(e.name||"").trim()})),appState.dataLoaded=!0,UIUtils.hideLoading()}catch(e){appState.users=MOCK_DATA.users,appState.dataLoaded=!0,UIUtils.hideLoading()}}static async fetchTAList(){try{UIUtils.showLoading("Loading TA list...");const e=await fetch(`${CONFIG.apiUrl}?action=getTAs`);if(!e.ok)throw new Error("Failed to fetch TAs data");const t=await e.json();appState.taList=t.tas||[],UIUtils.hideLoading()}catch(e){appState.taList=MOCK_DATA.tas,UIUtils.hideLoading()}}static async fetchUserData(e){try{UIUtils.showLoading("Loading user profile...");const t=await fetch(`${CONFIG.apiUrl}?action=getUserData&phone=${e}`);if(!t.ok)throw new Error("Failed to fetch user data");const a=await t.json();if(a.user){appState.currentUserType=a.user.userType||"",appState.currentUserName=a.user.name||"",sessionStorage.setItem("userType",appState.currentUserType),sessionStorage.setItem("userName",appState.currentUserName);const e=`${appState.currentUserName} (${appState.currentUserType})`;domElements.updateUserDisplays(e)}UIUtils.hideLoading()}catch(t){UIUtils.hideLoading()}}static async fetchTARatings(e){try{UIUtils.showLoading("Loading TA ratings...");const t=await fetch(`${CONFIG.apiUrl}?action=getTARatings&taId=${e}`);if(!t.ok)throw new Error("Failed to fetch TA ratings");const a=await t.json();return UIUtils.hideLoading(),a}catch(t){return UIUtils.hideLoading(),{status:"error",message:t.message,ratings:[]}}}static async submitRating(e){try{UIUtils.showLoading("Submitting rating...");const t=new URLSearchParams;t.append("action","submitRating"),Object.keys(e).forEach(a=>{t.append(a,e[a])});const a=await fetch(`${CONFIG.apiUrl}?${t.toString()}`);if(!a.ok)throw new Error(`HTTP error! status: ${a.status}`);const s=await a.json();return UIUtils.hideLoading(),s}catch(t){return UIUtils.hideLoading(),"TypeError"===t.name&&t.message.includes("Failed to fetch")?{status:"error",message:"Network error. Please check your internet connection and try again."}:{status:"error",message:`Submission failed: ${t.message}`}}}static async fetchExistingReviewPeriods(){try{UIUtils.showLoading("Loading existing reviews...");const e=await fetch(`${CONFIG.apiUrl}?action=getReviewPeriods&taId=${appState.selectedTAId}&raterType=${appState.currentUserType}`);if(!e.ok)throw new Error("Failed to fetch review periods");const t=((await e.json()).periods||[]).map(e=>({...e,startDate:DateUtils.formatDateStringCompact(e.startDate),endDate:DateUtils.formatDateStringCompact(e.endDate)}));appState.existingReviewPeriods=t,UIUtils.hideLoading()}catch(e){appState.existingReviewPeriods=[],UIUtils.hideLoading()}}},window.AuthManager=class{static async handleLogin(e,t){UIUtils.showLoading("Authenticating...");try{appState.dataLoaded||await APIService.fetchUsers();const a=appState.users.find(a=>String(a.phoneNumber).trim()===e&&String(a.password).trim()===t);if(a){appState.setCurrentUser(e,a.name,a.userType),appState.saveToSession();const t=`${appState.currentUserName} (${appState.currentUserType})`;domElements.updateUserDisplays(t),EventHandlers.updateUserInfo(appState.currentUserName,appState.currentUserType);const s=document.getElementById("existingRatingDisplay");s&&s.remove();const r=document.getElementById("ratingControls");return r&&(r.style.display="none"),0===appState.taList.length&&(await APIService.fetchTAList(),TAManager.populateTADropdown()),UIUtils.hideLoading(),{success:!0}}return UIUtils.hideLoading(),{success:!1,message:"Invalid phone number or password"}}catch(a){return UIUtils.hideLoading(),{success:!1,message:"Login failed. Please try again."}}}static logout(){appState.clearSession(),appState.reset(),ScreenManager.showLogin()}static async checkExistingSession(){if(UIUtils.showLoading("Checking session..."),appState.loadFromSession()){if(appState.currentUserType&&appState.currentUserName){const e=`${appState.currentUserName} (${appState.currentUserType})`;domElements.updateUserDisplays(e),EventHandlers.updateUserInfo(appState.currentUserName,appState.currentUserType)}else await APIService.fetchUserData(appState.currentUserPhone);0===appState.taList.length&&APIService.fetchTAList().then(()=>{TAManager.populateTADropdown()}),UIUtils.hideLoading(),ScreenManager.showTASelection()}else UIUtils.hideLoading(),ScreenManager.showLogin()}}}}});
//# sourceMappingURL=services-legacy-BJdM-trU.js.map
