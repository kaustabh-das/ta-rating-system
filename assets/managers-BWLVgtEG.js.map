{"version":3,"file":"managers-BWLVgtEG.js","sources":["../../js/ta-manager.js","../../js/rating-manager.js","../../js/screen-manager.js"],"sourcesContent":["// TA Management Module\nclass TAManager {\n    // Populate TA dropdown\n    static populateTADropdown() {\n        console.log('Populating TA dropdown with TAs:', appState.taList.length);\n        \n        // Clear existing options except the first one\n        while (domElements.taSelect.options.length > 1) {\n            domElements.taSelect.remove(1);\n        }\n        \n        // Get custom dropdown elements\n        const customSelect = document.getElementById('customTASelect');\n        const selectText = customSelect?.querySelector('.select-text');\n        \n        // Reset select text to default\n        if (selectText) {\n            selectText.textContent = 'Choose a Technical Assistant';\n            selectText.classList.remove('selected');\n        }\n        \n        // Reset hidden select value\n        domElements.taSelect.value = '';\n        \n        // Add TAs to hidden select for form submission\n        appState.taList.forEach((ta, index) => {\n            console.log(`Adding TA ${index + 1}:`, ta.name);\n            \n            const option = document.createElement('option');\n            option.value = ta.taId;\n            option.textContent = ta.name;\n            domElements.taSelect.appendChild(option);\n        });\n        \n        console.log('TA dropdown populated successfully');\n        \n        // Initialize custom dropdown functionality (this will populate the custom options)\n        this.initializeCustomDropdown();\n    }\n\n    // Initialize custom dropdown functionality\n    static initializeCustomDropdown() {\n        const customSelect = document.getElementById('customTASelect');\n        if (!customSelect) {\n            console.error('Custom select element not found');\n            return;\n        }\n        \n        const selectTrigger = customSelect.querySelector('.select-trigger');\n        const selectOptions = customSelect.querySelector('.select-options');\n        const selectText = customSelect.querySelector('.select-text');\n        const hiddenSelect = document.getElementById('taSelect');\n        \n        if (!selectTrigger || !selectOptions || !selectText || !hiddenSelect) {\n            console.error('Missing dropdown elements:', {\n                selectTrigger: !!selectTrigger,\n                selectOptions: !!selectOptions,\n                selectText: !!selectText,\n                hiddenSelect: !!hiddenSelect\n            });\n            return;\n        }\n        \n        console.log('Initializing custom dropdown...');\n        \n        // Remove any existing event listeners by clearing and rebuilding only the options\n        selectOptions.innerHTML = '';\n        \n        // Re-populate the options\n        appState.taList.forEach(ta => {\n            const customOption = document.createElement('div');\n            customOption.className = 'select-option';\n            customOption.textContent = ta.name;\n            customOption.dataset.value = ta.taId;\n            selectOptions.appendChild(customOption);\n        });\n        \n        // Remove existing click listeners on trigger (if any) and add fresh one\n        const newTrigger = selectTrigger.cloneNode(true);\n        selectTrigger.parentNode.replaceChild(newTrigger, selectTrigger);\n        \n        // Get fresh references\n        const freshTrigger = customSelect.querySelector('.select-trigger');\n        const freshOptions = customSelect.querySelector('.select-options');\n        const freshSelectText = customSelect.querySelector('.select-text');\n        \n        // Toggle dropdown\n        freshTrigger.addEventListener('click', (e) => {\n            console.log('Dropdown trigger clicked');\n            e.stopPropagation();\n            const isActive = freshTrigger.classList.contains('active');\n            \n            // Close all other dropdowns\n            document.querySelectorAll('.select-trigger.active').forEach(trigger => {\n                if (trigger !== freshTrigger) {\n                    trigger.classList.remove('active');\n                    trigger.nextElementSibling.classList.remove('show');\n                }\n            });\n            \n            if (!isActive) {\n                console.log('Opening dropdown');\n                freshTrigger.classList.add('active');\n                freshOptions.classList.add('show');\n            } else {\n                console.log('Closing dropdown');\n                freshTrigger.classList.remove('active');\n                freshOptions.classList.remove('show');\n            }\n        });\n        \n        // Handle option selection\n        freshOptions.addEventListener('click', (e) => {\n            if (e.target.classList.contains('select-option') && !e.target.classList.contains('disabled')) {\n                const selectedValue = e.target.dataset.value;\n                const selectedText = e.target.textContent;\n                \n                console.log('TA selected:', selectedText, 'with value:', selectedValue);\n                \n                // Update custom dropdown display using fresh reference\n                if (freshSelectText) {\n                    freshSelectText.textContent = selectedText;\n                    freshSelectText.classList.add('selected');\n                    console.log('Updated select text to:', selectedText);\n                } else {\n                    console.error('Could not find fresh .select-text element');\n                }\n                \n                // Update hidden select\n                hiddenSelect.value = selectedValue;\n                \n                // Update visual states\n                freshOptions.querySelectorAll('.select-option').forEach(opt => {\n                    opt.classList.remove('selected');\n                });\n                e.target.classList.add('selected');\n                \n                // Close dropdown\n                freshTrigger.classList.remove('active');\n                freshOptions.classList.remove('show');\n                \n                // Hide any error messages\n                UIUtils.hideError(domElements.taSelectError);\n                \n                // Trigger change event\n                hiddenSelect.dispatchEvent(new Event('change'));\n            }\n        });\n        \n        // Store the click outside handler to prevent duplicates\n        if (!TAManager._outsideClickHandler) {\n            TAManager._outsideClickHandler = (e) => {\n                const customDropdown = document.getElementById('customTASelect');\n                if (customDropdown && !customDropdown.contains(e.target)) {\n                    const trigger = customDropdown.querySelector('.select-trigger');\n                    const options = customDropdown.querySelector('.select-options');\n                    if (trigger && options) {\n                        trigger.classList.remove('active');\n                        options.classList.remove('show');\n                    }\n                }\n            };\n            document.addEventListener('click', TAManager._outsideClickHandler);\n        }\n    }\n\n    // Clean up event listeners to prevent accumulation\n    static cleanupDropdownListeners() {\n        if (TAManager._outsideClickHandler) {\n            document.removeEventListener('click', TAManager._outsideClickHandler);\n            TAManager._outsideClickHandler = null;\n        }\n    }\n\n    // Handle TA selection\n    static handleTASelection() {\n        UIUtils.hideError(domElements.taSelectError);\n        \n        const selectedTAId = domElements.taSelect.value;\n        if (!selectedTAId) {\n            UIUtils.showError(domElements.taSelectError, 'Please select a TA');\n            return false;\n        }\n        \n        const selectedOption = domElements.taSelect.options[domElements.taSelect.selectedIndex];\n        const selectedTAName = selectedOption.textContent;\n        \n        appState.setSelectedTA(selectedTAId, selectedTAName);\n        return true;\n    }\n}\n\n// Export the TAManager class\nexport { TAManager };\n\n// For backward compatibility (can be removed later)\nwindow.TAManager = TAManager;\n","// Rating Management Module\nclass RatingManager {\n    // Create rating controls (dropdown and add new button)\n    static createRatingControls() {\n        // Remove existing controls if any\n        const existingControls = document.getElementById('ratingControls');\n        if (existingControls) {\n            existingControls.remove();\n        }\n        \n        // Create controls container\n        const controlsContainer = document.createElement('div');\n        controlsContainer.id = 'ratingControls';\n        controlsContainer.className = 'rating-controls';\n        \n        // Create date range dropdown options (exclude currently displayed period)\n        const dropdownOptions = appState.existingReviewPeriods\n            .filter(period => {\n                // Exclude the currently displayed period\n                if (!appState.currentDisplayedPeriod) return true;\n                return !(period.startDate === appState.currentDisplayedPeriod.startDate && \n                        period.endDate === appState.currentDisplayedPeriod.endDate);\n            })\n            .map(period => ({\n                text: `${period.startDate} - ${period.endDate}`,\n                value: period\n            }));\n        \n        const placeholder = dropdownOptions.length > 0 ? \n            'Select a rating period â–¼' : \n            'No other rating periods available';\n        \n        // Check if we should disable dropdown due to single total period\n        const totalPeriods = appState.existingReviewPeriods.length;\n        const shouldDisableDropdown = totalPeriods <= 1;\n        \n        // Create dropdown (left side)\n        const dropdown = UIUtils.createDropdown(\n            dropdownOptions,\n            (option) => RatingManager.displayRatingForPeriod(option.value),\n            placeholder,\n            shouldDisableDropdown\n        );\n        \n        // Limit dropdown width to prevent excessive padding\n        dropdown.container.style.maxWidth = '300px';\n        dropdown.container.style.flexShrink = '1';\n        \n        // Create Add New Rating button (right side)\n        const addNewButton = document.createElement('button');\n        addNewButton.id = 'addNewRatingBtn';\n        addNewButton.type = 'button';\n        addNewButton.className = 'compact-btn';\n        addNewButton.textContent = '+ Rating';\n        \n        addNewButton.addEventListener('click', function() {\n            ScreenManager.showDateRangeModal();\n        });\n        \n        controlsContainer.appendChild(dropdown.container);\n        controlsContainer.appendChild(addNewButton);\n        \n        // Insert controls after TA name but before review period display\n        const contentDiv = domElements.ratingContainer.querySelector('.content');\n        const taNameElement = document.getElementById('selectedTAName');\n        taNameElement.parentNode.insertBefore(controlsContainer, taNameElement.nextSibling);\n    }\n\n    // Refresh dropdown to exclude currently displayed period\n    static refreshDropdown() {\n        const existingDropdown = document.querySelector('#ratingControls .dropdown-container');\n        \n        if (!existingDropdown) {\n            // Try to update button text directly if dropdown exists but wasn't found by the selector\n            RatingManager.updateDropdownButtonText();\n            return;\n        }\n\n        // Create updated dropdown options (exclude currently displayed period)\n        const dropdownOptions = appState.existingReviewPeriods\n            .filter(period => {\n                // Exclude the currently displayed period\n                if (!appState.currentDisplayedPeriod) return true;\n                const isCurrentPeriod = period.startDate === appState.currentDisplayedPeriod.startDate && \n                        period.endDate === appState.currentDisplayedPeriod.endDate;\n                return !isCurrentPeriod;\n            })\n            .map(period => ({\n                text: `${period.startDate} - ${period.endDate}`,\n                value: period\n            }));\n\n        // Determine the button text - always show the current period if available\n        let buttonText;\n        if (appState.currentDisplayedPeriod) {\n            buttonText = `${appState.currentDisplayedPeriod.startDate} - ${appState.currentDisplayedPeriod.endDate} â–¼`;\n        } else {\n            buttonText = dropdownOptions.length > 0 ? 'Select a rating period â–¼' : 'No rating periods available';\n        }\n\n        // Check if we should disable dropdown due to single total period\n        const totalPeriods = appState.existingReviewPeriods.length;\n        const shouldDisableDropdown = totalPeriods <= 1;\n\n        // Create new dropdown\n        const newDropdown = UIUtils.createDropdown(\n            dropdownOptions,\n            (option) => RatingManager.displayRatingForPeriod(option.value),\n            buttonText, // Use current period as the \"placeholder\"\n            shouldDisableDropdown\n        );\n\n        // Apply same styling as initial dropdown\n        newDropdown.container.style.maxWidth = '300px';\n        newDropdown.container.style.flexShrink = '1';\n\n        // Replace the old dropdown\n        existingDropdown.parentNode.replaceChild(newDropdown.container, existingDropdown);\n    }\n\n    // Update dropdown button text to show currently selected period\n    static updateDropdownButtonText() {\n        const dropdownButton = document.querySelector('#ratingControls .dropdown-container button');\n        \n        if (!dropdownButton || !appState.currentDisplayedPeriod) return;\n\n        const currentPeriodText = `${appState.currentDisplayedPeriod.startDate} - ${appState.currentDisplayedPeriod.endDate}`;\n        dropdownButton.textContent = currentPeriodText + ' â–¼';\n    }\n\n    // Display rating data for a specific period\n    static async displayRatingForPeriod(period) {\n        try {\n            UIUtils.showLoading('Loading rating data...');\n            \n            // Set the current displayed period in state\n            appState.currentDisplayedPeriod = period;\n            \n            // Refresh the dropdown to exclude the currently displayed period\n            // This will also set the correct button text\n            RatingManager.refreshDropdown();\n            \n            // Update period display with properly formatted dates\n            domElements.reviewPeriodDisplay.textContent = `${DateUtils.formatDateStringCompact(period.startDate)} - ${DateUtils.formatDateStringCompact(period.endDate)}`;\n            // Hide the blue box when viewing existing ratings (redundant with dropdown)\n            domElements.reviewPeriodDisplay.style.display = 'none';\n            \n            // Fetch all ratings for this TA\n            const response = await fetch(`${CONFIG.apiUrl}?action=getTARatings&taId=${appState.selectedTAId}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch ratings');\n            }\n            \n            const data = await response.json();\n            \n            // Normalize the rating dates for comparison\n            const normalizedRatings = data.ratings.map(rating => ({\n                ...rating,\n                startDate: DateUtils.formatDateStringCompact(rating.startDate),\n                endDate: DateUtils.formatDateStringCompact(rating.endDate)\n            }));\n            \n            // Find the specific rating for this period and user type\n            const periodRating = normalizedRatings.find(rating => \n                rating.raterType === appState.currentUserType &&\n                rating.startDate === period.startDate &&\n                rating.endDate === period.endDate\n            );\n            \n            if (periodRating) {\n                // Show existing rating data (read-only)\n                RatingManager.displayExistingRating(periodRating);\n                domElements.ratingForm.style.display = 'none';\n            } else {\n                // No rating found for this period, show empty form\n                domElements.reviewPeriodDisplay.textContent = `${DateUtils.formatDateStringCompact(period.startDate)} - ${DateUtils.formatDateStringCompact(period.endDate)} (No rating found)`;\n                domElements.ratingForm.style.display = 'block';\n                UIUtils.resetForm(domElements.ratingForm);\n                \n                // Setup field event listeners for error clearing\n                RatingManager.setupRatingFieldListeners();\n            }\n            \n            UIUtils.hideLoading();\n        } catch (error) {\n            console.error('Error loading rating data:', error);\n            UIUtils.hideLoading();\n            domElements.reviewPeriodDisplay.textContent = `${DateUtils.formatDateStringCompact(period.startDate)} - ${DateUtils.formatDateStringCompact(period.endDate)} (Error loading)`;\n            domElements.ratingForm.style.display = 'none';\n        }\n    }\n\n    // Display existing rating data in a read-only format\n    static displayExistingRating(rating) {\n        // Remove existing rating display if any\n        const existingDisplay = document.getElementById('existingRatingDisplay');\n        if (existingDisplay) {\n            existingDisplay.remove();\n        }\n        \n        // Create rating display container\n        const ratingDisplay = document.createElement('div');\n        ratingDisplay.id = 'existingRatingDisplay';\n        \n        // Create header\n        // const header = document.createElement('h4');\n        // header.textContent = 'Rating Details';\n        // ratingDisplay.appendChild(header);\n        \n        // Create modern rating display\n        const raterInfo = {\n            name: rating.raterName,\n            type: rating.raterType,\n            date: DateUtils.formatDateCompact(new Date(rating.timestamp))\n        };\n        \n        const modernDisplay = UIUtils.createModernRatingDisplay(rating, raterInfo, RATING_CATEGORIES, rating.comments);\n        ratingDisplay.appendChild(modernDisplay);\n        \n        // Note: Comments are now included in the modern display, no need to add separately\n        \n        // Insert rating display after review period display\n        domElements.reviewPeriodDisplay.parentNode.insertBefore(ratingDisplay, domElements.reviewPeriodDisplay.nextSibling);\n    }\n\n    // Clear validation error highlighting\n    static clearValidationErrors() {\n        // Remove error class from all rating groups\n        document.querySelectorAll('.rating-group.error').forEach(group => {\n            group.classList.remove('error');\n        });\n        \n        // Remove error class from form groups (comments)\n        document.querySelectorAll('.form-group.error').forEach(group => {\n            group.classList.remove('error');\n        });\n    }\n\n    // Setup rating form field event listeners for error clearing\n    static setupRatingFieldListeners() {\n        // Clear error highlighting when users interact with rating fields\n        const radioButtons = document.querySelectorAll('#ratingForm input[type=\"radio\"]');\n        \n        radioButtons.forEach(radio => {\n            radio.addEventListener('change', function() {\n                const ratingGroup = this.closest('.rating-group');\n                if (ratingGroup && ratingGroup.classList.contains('error')) {\n                    ratingGroup.classList.remove('error');\n                }\n            });\n        });\n    }\n\n    // Handle rating form submission\n    static async handleRatingSubmission(formData) {\n        // Clear any previous error highlighting\n        RatingManager.clearValidationErrors();\n        \n        // Validate all ratings are selected\n        const requiredRatings = ['discipline', 'ethics', 'knowledge', 'communication', 'teamwork'];\n        const ratings = {};\n        let hasError = false;\n        const missingRatings = [];\n\n        requiredRatings.forEach(rating => {\n            const value = formData.get(rating);\n            if (!value) {\n                hasError = true;\n                missingRatings.push(rating);\n                // Highlight the rating group with error\n                const ratingGroup = document.querySelector(`input[name=\"${rating}\"]`).closest('.rating-group');\n                if (ratingGroup) {\n                    ratingGroup.classList.add('error');\n                }\n            } else {\n                ratings[rating] = parseInt(value);\n            }\n        });\n\n        // Comments are optional, no validation needed\n        \n        if (hasError) {\n            const errorMessage = 'Please rate all categories';\n            UIUtils.showError(domElements.ratingError, errorMessage);\n            \n            // Scroll to the first error field\n            const firstErrorElement = document.querySelector('.rating-group.error, .form-group.error');\n            if (firstErrorElement) {\n                firstErrorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            }\n            \n            return false;\n        }\n\n        // Prepare rating data\n        const ratingData = {\n            taId: appState.selectedTAId,\n            taName: appState.selectedTAName,\n            raterPhone: appState.currentUserPhone,\n            raterName: appState.currentUserName,\n            raterType: appState.currentUserType,\n            startDate: appState.selectedStartDate,\n            endDate: appState.selectedEndDate,\n            ...ratings,\n            comments: formData.get('comments') || '',\n            timestamp: new Date().toISOString()\n        };\n\n        console.log('Submitting rating data:', ratingData);\n\n        // Submit rating\n        const result = await APIService.submitRating(ratingData);\n\n        console.log('Rating submission result:', result);\n\n        if (result.status === 'success') {\n            ScreenManager.showConfirmationScreen();\n            return true;\n        } else {\n            UIUtils.showError(domElements.ratingError, result.message || 'Failed to submit rating. Please try again.');\n            return false;\n        }\n    }\n}\n\n// Export the RatingManager class\nexport { RatingManager };\n\n// For backward compatibility (can be removed later)\nwindow.RatingManager = RatingManager;\n","// Screen Navigation Module\nclass ScreenManager {\n    // Show login screen\n    static showLogin() {\n        domElements.hideAllContainers();\n        domElements.loginContainer.style.display = 'flex';\n        \n        // Reset form fields\n        UIUtils.resetForm(domElements.loginForm);\n        domElements.resetErrors();\n        \n        // Reset body style for login screen\n        UIUtils.setCenteredBodyStyle();\n    }\n\n    // Show TA selection screen\n    static showTASelection() {\n        domElements.hideAllContainers();\n        domElements.taSelectionContainer.style.display = 'flex';\n        \n        // Clear any validation errors from rating form\n        RatingManager.clearValidationErrors();\n        \n        // Clean up any existing dropdown listeners to prevent duplicates\n        TAManager.cleanupDropdownListeners();\n        \n        // Reset body style\n        UIUtils.setCenteredBodyStyle();\n        \n        // Fetch TA list if not already loaded\n        if (appState.taList.length === 0) {\n            APIService.fetchTAList().then(() => {\n                TAManager.populateTADropdown();\n            });\n        } else {\n            // Reinitialize dropdown if TAs are already loaded\n            TAManager.initializeCustomDropdown();\n        }\n    }\n\n    // Show rating screen with date range\n    static showRatingScreenWithDateRange() {\n        domElements.hideAllContainers();\n        domElements.ratingContainer.style.display = 'flex';\n        \n        // Clear any previous validation errors\n        RatingManager.clearValidationErrors();\n        \n        // Remove rating controls (dropdown) for new rating workflow\n        const ratingControls = document.getElementById('ratingControls');\n        if (ratingControls) {\n            ratingControls.remove();\n        }\n        \n        // Hide officer sections for new rating workflow\n        OfficerRatingManager.resetSections();\n        \n        // Hide any existing rating displays\n        const existingRatingDisplay = document.getElementById('existingRatingDisplay');\n        if (existingRatingDisplay) {\n            existingRatingDisplay.remove();\n        }\n        \n        // Update page title for new rating\n        const pageTitle = document.querySelector('#ratingContainer .page-title');\n        if (pageTitle) {\n            pageTitle.innerHTML = '<i class=\"fas fa-plus-circle\"></i>Add New Rating';\n        }\n        \n        // Update displays\n        domElements.selectedTANameDisplay.textContent = appState.selectedTAName;\n        domElements.reviewPeriodDisplay.textContent = `${DateUtils.formatDateStringCompact(appState.selectedStartDate)} - ${DateUtils.formatDateStringCompact(appState.selectedEndDate)}`;\n        domElements.reviewPeriodDisplay.style.display = 'block'; // Show blue box for new ratings\n        \n        // Reset and show form\n        UIUtils.resetForm(domElements.ratingForm);\n        domElements.ratingForm.style.display = 'block';\n        \n        // Setup field event listeners for error clearing\n        RatingManager.setupRatingFieldListeners();\n        \n        // Set body style for scrollable content\n        UIUtils.setScrollableBodyStyle();\n    }\n\n    // Show rating screen with previous data display\n    static async showRatingScreenWithPreviousData() {\n        domElements.hideAllContainers();\n        domElements.ratingContainer.style.display = 'flex';\n        \n        // Clear any previous validation errors\n        RatingManager.clearValidationErrors();\n        \n        // Clear any existing rating displays from previous TA\n        const existingRatingDisplay = document.getElementById('existingRatingDisplay');\n        if (existingRatingDisplay) {\n            existingRatingDisplay.remove();\n        }\n        \n        // Clear any previously displayed period\n        appState.clearDisplayedPeriod();\n        \n        // Reset officer sections\n        OfficerRatingManager.resetSections();\n        \n        // Update page title for viewing past ratings\n        const pageTitle = document.querySelector('#ratingContainer .page-title');\n        if (pageTitle) {\n            pageTitle.innerHTML = '<i class=\"fas fa-star\"></i>Past TA Ratings';\n        }\n        \n        // Update displays\n        domElements.selectedTANameDisplay.textContent = appState.selectedTAName;\n        \n        // Check if user is an officer to show specialized interface\n        if (appState.currentUserType === 'officer') {\n            // Show officer-specific rating screen with mentor and officer sections\n            await OfficerRatingManager.initializeOfficerRatingScreen();\n        } else {\n            // Show regular rating screen for mentors\n            await ScreenManager.showRegularRatingScreen();\n        }\n        \n        // Set body style for scrollable content\n        UIUtils.setScrollableBodyStyle();\n    }\n    \n    // Show regular rating screen (for mentors)\n    static async showRegularRatingScreen() {\n        // Fetch existing review periods to show in dropdown\n        await APIService.fetchExistingReviewPeriods();\n        \n        // Create rating controls (dropdown and add button)\n        RatingManager.createRatingControls();\n        \n        // Show the most recent rating by default if available\n        if (appState.existingReviewPeriods.length > 0) {\n            await RatingManager.displayRatingForPeriod(appState.existingReviewPeriods[0]);\n        } else {\n            // No existing ratings, show message but don't show rating form yet\n            domElements.reviewPeriodDisplay.textContent = 'No previous ratings found';\n            domElements.reviewPeriodDisplay.style.display = 'block';\n            // Don't show rating form automatically - user must click \"Add New Rating\"\n            domElements.ratingForm.style.display = 'none';\n        }\n    }\n\n    // Show review management screen\n    static async showReviewManagement() {\n        domElements.hideAllContainers();\n        domElements.reviewManagementContainer.style.display = 'block';\n        \n        // Update TA name display\n        domElements.reviewManagementTAName.textContent = appState.selectedTAName;\n        \n        // Fetch existing review periods for this TA and current user type\n        await APIService.fetchExistingReviewPeriods();\n        \n        // Display existing reviews and add button\n        ReviewManager.displayExistingReviews();\n        \n        // Set body style\n        UIUtils.setScrollableBodyStyle();\n    }\n\n    // Show confirmation screen\n    static showConfirmationScreen() {\n        domElements.hideAllContainers();\n        domElements.confirmationContainer.style.display = 'block';\n        \n        // Reset body style\n        UIUtils.setCenteredBodyStyle();\n    }\n\n        // Show date range modal\n    static showDateRangeModal() {\n        const modal = document.getElementById('dateRangeModal');\n        if (modal) {\n            modal.style.display = 'block';\n            \n            // Add click outside to close functionality\n            setTimeout(() => {\n                modal.addEventListener('click', function(event) {\n                    if (event.target === modal) {\n                        ScreenManager.closeDateRangeModal();\n                    }\n                });\n            }, 100);\n        }\n        \n        // Reset form and constraints\n        DateUtils.setDateConstraints();\n        const startDateInput = document.getElementById('startDate');\n        const endDateInput = document.getElementById('endDate');\n        \n        if (startDateInput) startDateInput.value = '';\n        if (endDateInput) endDateInput.value = '';\n        \n        const proceedBtn = document.getElementById('proceedWithDatesBtn');\n        if (proceedBtn) proceedBtn.disabled = true;\n    }\n\n    // Close date range modal\n    static closeDateRangeModal() {\n        const modal = document.getElementById('dateRangeModal');\n        if (modal) {\n            modal.style.display = 'none';\n        }\n        \n        // Also reset form if needed\n        const startDateInput = document.getElementById('startDate');\n        const endDateInput = document.getElementById('endDate');\n        const dateRangeError = document.getElementById('dateRangeError');\n        \n        if (startDateInput) startDateInput.value = '';\n        if (endDateInput) endDateInput.value = '';\n        if (dateRangeError) dateRangeError.style.display = 'none';\n        \n        // Disable proceed button\n        const proceedBtn = document.getElementById('proceedWithDatesBtn');\n        if (proceedBtn) proceedBtn.disabled = true;\n    }\n}\n\n// Export the ScreenManager class\nexport { ScreenManager };\n\n// For backward compatibility (can be removed later)\nwindow.ScreenManager = ScreenManager;\n"],"names":["window","TAManager","populateTADropdown","domElements","taSelect","options","length","remove","customSelect","document","getElementById","selectText","querySelector","textContent","classList","value","appState","taList","forEach","ta","index","option","createElement","taId","name","appendChild","this","initializeCustomDropdown","selectTrigger","selectOptions","hiddenSelect","innerHTML","customOption","className","dataset","newTrigger","cloneNode","parentNode","replaceChild","freshTrigger","freshOptions","freshSelectText","addEventListener","e","stopPropagation","isActive","contains","querySelectorAll","trigger","nextElementSibling","add","target","selectedValue","selectedText","opt","UIUtils","hideError","taSelectError","dispatchEvent","Event","_outsideClickHandler","customDropdown","cleanupDropdownListeners","removeEventListener","handleTASelection","selectedTAId","showError","selectedTAName","selectedIndex","setSelectedTA","RatingManager","createRatingControls","existingControls","controlsContainer","id","dropdownOptions","existingReviewPeriods","filter","period","currentDisplayedPeriod","startDate","endDate","map","text","concat","placeholder","shouldDisableDropdown","dropdown","createDropdown","displayRatingForPeriod","container","style","maxWidth","flexShrink","addNewButton","type","ScreenManager","showDateRangeModal","ratingContainer","taNameElement","insertBefore","nextSibling","refreshDropdown","existingDropdown","updateDropdownButtonText","buttonText","newDropdown","dropdownButton","currentPeriodText","showLoading","reviewPeriodDisplay","DateUtils","formatDateStringCompact","display","response","fetch","apiUrl","ok","Error","data","json","periodRating","ratings","rating","find","raterType","currentUserType","displayExistingRating","ratingForm","resetForm","setupRatingFieldListeners","hideLoading","error","existingDisplay","ratingDisplay","raterInfo","raterName","date","formatDateCompact","Date","timestamp","modernDisplay","createModernRatingDisplay","RATING_CATEGORIES","comments","clearValidationErrors","group","radio","ratingGroup","closest","handleRatingSubmission","formData","hasError","get","parseInt","errorMessage","ratingError","firstErrorElement","scrollIntoView","behavior","block","ratingData","taName","raterPhone","currentUserPhone","currentUserName","selectedStartDate","selectedEndDate","toISOString","result","APIService","submitRating","status","showConfirmationScreen","message","showLogin","hideAllContainers","loginContainer","loginForm","resetErrors","setCenteredBodyStyle","showTASelection","taSelectionContainer","fetchTAList","then","showRatingScreenWithDateRange","ratingControls","OfficerRatingManager","resetSections","existingRatingDisplay","pageTitle","selectedTANameDisplay","setScrollableBodyStyle","showRatingScreenWithPreviousData","clearDisplayedPeriod","initializeOfficerRatingScreen","showRegularRatingScreen","fetchExistingReviewPeriods","showReviewManagement","reviewManagementContainer","reviewManagementTAName","ReviewManager","displayExistingReviews","confirmationContainer","modal","setTimeout","event","closeDateRangeModal","setDateConstraints","startDateInput","endDateInput","proceedBtn","disabled","dateRangeError"],"mappings":"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"}