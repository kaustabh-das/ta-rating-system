{"version":3,"file":"main-DNxVMH3q.js","sources":["../../js/config.js","../../js/state.js","../../js/dom-elements.js","../../js/review-manager.js","../../js/officer-rating-manager.js","../../js/event-handlers.js","../../js/app.js","../../js/main.js"],"sourcesContent":["// Configuration and Constants\nexport const CONFIG = {\n    apiUrl: 'https://script.google.com/macros/s/AKfycbz09ywNpQETLLvf178Cf50Kp2MRZBMUKo35Jc44Zvk5k0Na6ePZJ5p6hHsmtlSrzTzw/exec',\n    MINIMUM_REVIEW_PERIOD_DAYS: 90,\n    DATE_FORMAT: 'en-GB', // DD/MM/YYYY format\n    MINIMUM_DATE: '2020-01-01'\n};\n\n// Mock data for fallback\nexport const MOCK_DATA = {\n    users: [\n        { phoneNumber: \"1234567890\", password: \"password123\", userType: \"mentor\", name: \"John Mentor\" },\n        { phoneNumber: \"9876543210\", password: \"securepass\", userType: \"officer\", name: \"Susan Officer\" }\n    ],\n    tas: [\n        { taId: \"ta1\", name: \"Kaustabh Das\", department: \"Computer Science\" },\n        { taId: \"ta2\", name: \"Mrinal Kalita\", department: \"Electronics\" },\n        { taId: \"ta3\", name: \"Susan Kumar\", department: \"Civil\" }\n    ]\n};\n\n// Rating categories configuration\nexport const RATING_CATEGORIES = [\n    { key: 'discipline', label: 'Discipline' },\n    { key: 'ethics', label: 'Ethics' },\n    { key: 'knowledge', label: 'Knowledge' },\n    { key: 'communication', label: 'Communication' },\n    { key: 'teamwork', label: 'Teamwork' }\n];\n\n// For backward compatibility (can be removed later)\nwindow.CONFIG = CONFIG;\nwindow.MOCK_DATA = MOCK_DATA;\nwindow.RATING_CATEGORIES = RATING_CATEGORIES;\n","// State Management Module\nclass AppState {\n    constructor() {\n        // User state\n        this.users = [];\n        this.taList = [];\n        this.currentUserType = '';\n        this.currentUserPhone = '';\n        this.currentUserName = '';\n        \n        // Selected TA state\n        this.selectedTAId = '';\n        this.selectedTAName = '';\n        \n        // Date range state\n        this.selectedStartDate = '';\n        this.selectedEndDate = '';\n        this.existingReviewPeriods = [];\n        this.currentDisplayedPeriod = null;  // Track currently displayed rating period\n        \n        // Officer interface - track displayed periods for each section\n        this.currentMentorDisplayedPeriod = null;\n        this.currentOfficerDisplayedPeriod = null;\n        \n        // Application state\n        this.dataLoaded = false;\n    }\n\n    // User state methods\n    setCurrentUser(phone, name, type) {\n        this.currentUserPhone = phone;\n        this.currentUserName = name;\n        this.currentUserType = type;\n        \n        // Clear TA and rating data when switching users\n        this.selectedTAId = '';\n        this.selectedTAName = '';\n        this.selectedStartDate = '';\n        this.selectedEndDate = '';\n        this.existingReviewPeriods = [];\n        this.currentDisplayedPeriod = null;\n        this.currentMentorDisplayedPeriod = null;\n        this.currentOfficerDisplayedPeriod = null;\n    }\n\n    getCurrentUser() {\n        return {\n            phone: this.currentUserPhone,\n            name: this.currentUserName,\n            type: this.currentUserType\n        };\n    }\n\n    // TA state methods\n    setSelectedTA(id, name) {\n        this.selectedTAId = id;\n        this.selectedTAName = name;\n        \n        // Clear previous TA's rating data when switching TAs\n        this.selectedStartDate = '';\n        this.selectedEndDate = '';\n        this.existingReviewPeriods = [];\n        this.currentDisplayedPeriod = null;\n        this.currentMentorDisplayedPeriod = null;\n        this.currentOfficerDisplayedPeriod = null;\n    }\n\n    getSelectedTA() {\n        return {\n            id: this.selectedTAId,\n            name: this.selectedTAName\n        };\n    }\n\n    // Date range methods\n    setDateRange(startDate, endDate) {\n        // Ensure dates are properly formatted in DD/MM/YY format\n        // Handle both YYYY-MM-DD (from HTML date inputs) and DD/MM/YYYY formats\n        this.selectedStartDate = this.formatDateForStorage(startDate);\n        this.selectedEndDate = this.formatDateForStorage(endDate);\n    }\n\n    // Helper method to format dates consistently\n    formatDateForStorage(dateInput) {\n        if (!dateInput) return '';\n        \n        let date;\n        const dateStr = String(dateInput).trim();\n        \n        if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n            // YYYY-MM-DD format from HTML date input\n            date = new Date(dateStr);\n        } else if (dateStr.includes('/')) {\n            // DD/MM/YYYY or DD/MM/YY format\n            const parts = dateStr.split('/');\n            if (parts.length === 3) {\n                let year = parseInt(parts[2]);\n                if (year < 100) {\n                    year += year < 50 ? 2000 : 1900;\n                }\n                date = new Date(year, parts[1] - 1, parts[0]);\n            }\n        } else {\n            // Try parsing as-is\n            date = new Date(dateStr);\n        }\n        \n        if (date && !isNaN(date.getTime())) {\n            // Format as DD/MM/YY\n            const day = String(date.getDate()).padStart(2, '0');\n            const month = String(date.getMonth() + 1).padStart(2, '0');\n            const year = String(date.getFullYear()).slice(-2);\n            return `${day}/${month}/${year}`;\n        }\n        \n        return dateStr; // Return original if can't parse\n    }\n\n    getDateRange() {\n        return {\n            startDate: this.selectedStartDate,\n            endDate: this.selectedEndDate\n        };\n    }\n\n    // Session storage methods\n    saveToSession() {\n        sessionStorage.setItem('isLoggedIn', 'true');\n        sessionStorage.setItem('userPhone', this.currentUserPhone);\n        sessionStorage.setItem('userType', this.currentUserType);\n        sessionStorage.setItem('userName', this.currentUserName);\n    }\n\n    loadFromSession() {\n        const isLoggedIn = sessionStorage.getItem('isLoggedIn') === 'true';\n        if (isLoggedIn) {\n            this.currentUserPhone = sessionStorage.getItem('userPhone') || '';\n            this.currentUserType = sessionStorage.getItem('userType') || '';\n            this.currentUserName = sessionStorage.getItem('userName') || '';\n        }\n        return isLoggedIn;\n    }\n\n    clearSession() {\n        sessionStorage.removeItem('isLoggedIn');\n        sessionStorage.removeItem('userPhone');\n        sessionStorage.removeItem('userType');\n        sessionStorage.removeItem('userName');\n    }\n\n    // Reset methods\n    reset() {\n        this.selectedTAId = '';\n        this.selectedTAName = '';\n        this.selectedStartDate = '';\n        this.selectedEndDate = '';\n        this.existingReviewPeriods = [];\n        this.currentDisplayedPeriod = null;\n        this.currentMentorDisplayedPeriod = null;\n        this.currentOfficerDisplayedPeriod = null;\n    }\n\n    // Method to clear currently displayed period\n    clearDisplayedPeriod() {\n        this.currentDisplayedPeriod = null;\n        this.currentMentorDisplayedPeriod = null;\n        this.currentOfficerDisplayedPeriod = null;\n    }\n    \n    // Methods to track officer section displayed periods\n    setMentorDisplayedPeriod(period) {\n        this.currentMentorDisplayedPeriod = period;\n    }\n    \n    setOfficerDisplayedPeriod(period) {\n        this.currentOfficerDisplayedPeriod = period;\n    }\n    \n    getCurrentDisplayedPeriodForSection(userType) {\n        if (userType === 'mentor') {\n            return this.currentMentorDisplayedPeriod;\n        } else if (userType === 'officer') {\n            return this.currentOfficerDisplayedPeriod;\n        }\n        return null;\n    }\n}\n\n// Global state instance\nexport const appState = new AppState();\n\n// For backward compatibility (can be removed later)\nwindow.appState = appState;\n","// DOM Elements Manager\nclass DOMElements {\n    constructor() {\n        this.initializeElements();\n    }\n\n    initializeElements() {\n        // Login elements\n        this.loginForm = document.getElementById('loginForm');\n        this.phoneInput = document.getElementById('phoneNumber');\n        this.passwordInput = document.getElementById('password');\n        this.phoneError = document.getElementById('phoneError');\n        this.passwordError = document.getElementById('passwordError');\n        this.loginError = document.getElementById('loginError');\n\n        // Container elements\n        this.loginContainer = document.getElementById('loginContainer');\n        this.taSelectionContainer = document.getElementById('taSelectionContainer');\n        this.ratingContainer = document.getElementById('ratingContainer');\n        this.confirmationContainer = document.getElementById('confirmationContainer');\n        this.reviewManagementContainer = document.getElementById('reviewManagementContainer');\n        this.dateRangeModal = document.getElementById('dateRangeModal');\n\n        // Header elements\n        this.mainHeader = document.getElementById('mainHeader');\n        this.globalUserName = document.getElementById('globalUserName');\n        this.globalUserRole = document.getElementById('globalUserRole');\n        this.globalLogoutBtn = document.getElementById('globalLogoutBtn');\n        this.navBreadcrumb = document.getElementById('navBreadcrumb');\n\n        // User display elements (legacy - keeping for compatibility)\n        this.userDisplayName = document.getElementById('userDisplayName');\n        this.userDisplayName2 = document.getElementById('userDisplayName2');\n        this.userDisplayName3 = document.getElementById('userDisplayName3');\n        this.userDisplayName4 = document.getElementById('userDisplayName4');\n\n        // TA selection elements\n        this.taSelect = document.getElementById('taSelect');\n        this.taSelectError = document.getElementById('taSelectError');\n        this.proceedToRatingBtn = document.getElementById('proceedToRatingBtn');\n        this.selectedTANameDisplay = document.getElementById('selectedTAName');\n\n        // Rating form elements\n        this.ratingForm = document.getElementById('ratingForm');\n        this.ratingError = document.getElementById('ratingError');\n\n        // Navigation buttons\n        this.logoutButton = document.getElementById('logoutButton');\n        this.logoutButton2 = document.getElementById('logoutButton2');\n        this.logoutButton3 = document.getElementById('logoutButton3');\n        this.globalLogoutBtn = document.getElementById('globalLogoutBtn');\n        this.backToSelectionBtn = document.getElementById('backToSelectionBtn');\n        this.rateAnotherBtn = document.getElementById('rateAnotherBtn');\n\n        // Loading overlay\n        this.loadingOverlay = document.getElementById('loadingOverlay');\n\n        // Date range elements\n        this.startDateInput = document.getElementById('startDate');\n        this.endDateInput = document.getElementById('endDate');\n        this.dateRangeError = document.getElementById('dateRangeError');\n        this.addReviewBtn = document.getElementById('addReviewBtn');\n        this.proceedWithDatesBtn = document.getElementById('proceedWithDatesBtn');\n        this.existingReviewsList = document.getElementById('existingReviewsList');\n        this.reviewManagementTAName = document.getElementById('reviewManagementTAName');\n        this.reviewPeriodDisplay = document.getElementById('reviewPeriodDisplay');\n    }\n\n    // Utility methods for common DOM operations\n    hideAllContainers() {\n        this.loginContainer.style.display = 'none';\n        this.taSelectionContainer.style.display = 'none';\n        this.ratingContainer.style.display = 'none';\n        this.confirmationContainer.style.display = 'none';\n        this.reviewManagementContainer.style.display = 'none';\n        if (this.dateRangeModal) this.dateRangeModal.style.display = 'none';\n    }\n\n    resetErrors() {\n        this.phoneError.style.display = 'none';\n        this.passwordError.style.display = 'none';\n        this.loginError.style.display = 'none';\n        this.taSelectError.style.display = 'none';\n        this.ratingError.style.display = 'none';\n        this.dateRangeError.style.display = 'none';\n    }\n\n    updateUserDisplays(userInfo) {\n        // Update legacy user displays (keeping for compatibility)\n        const elements = [\n            this.userDisplayName,\n            this.userDisplayName2,\n            this.userDisplayName3,\n            this.userDisplayName4\n        ];\n\n        elements.forEach(element => {\n            if (element) element.textContent = userInfo;\n        });\n\n        // Update modern header user info\n        if (this.globalUserName) {\n            this.globalUserName.textContent = userInfo.name || userInfo;\n        }\n        if (this.globalUserRole) {\n            this.globalUserRole.textContent = userInfo.role || 'User';\n        }\n    }\n\n    showHeader() {\n        if (this.mainHeader) {\n            this.mainHeader.style.display = 'block';\n        }\n    }\n\n    hideHeader() {\n        if (this.mainHeader) {\n            this.mainHeader.style.display = 'none';\n        }\n    }\n\n    updateBreadcrumb(text) {\n        if (this.navBreadcrumb) {\n            this.navBreadcrumb.innerHTML = `<span class=\"breadcrumb-item active\">${text}</span>`;\n        }\n    }\n\n    showError(element, message) {\n        if (element) {\n            const errorText = element.querySelector('.error-text');\n            if (errorText) {\n                errorText.textContent = message;\n            } else {\n                element.textContent = message;\n            }\n            element.classList.add('show');\n            element.style.display = 'flex';\n        }\n    }\n\n    hideError(element) {\n        if (element) {\n            element.classList.remove('show');\n            element.style.display = 'none';\n        }\n    }\n\n    setBodyStyle(className = '', styles = {}) {\n        document.body.className = className;\n        Object.assign(document.body.style, styles);\n    }\n}\n\n// Global DOM elements instance\nexport const domElements = new DOMElements();\n\n// For backward compatibility (can be removed later)\nwindow.domElements = domElements;\n","// Review Management Module\nclass ReviewManager {\n    // Display existing reviews\n    static displayExistingReviews() {\n        const reviewsList = domElements.existingReviewsList;\n        \n        // Clear existing content\n        reviewsList.innerHTML = '';\n        \n        if (appState.existingReviewPeriods.length === 0) {\n            // No reviews - center the Add Review button\n            reviewsList.innerHTML = '<p>No reviews found for this TA.</p>';\n            domElements.addReviewBtn.textContent = '+ Add First Review';\n            domElements.addReviewBtn.style.margin = '20px auto';\n            domElements.addReviewBtn.style.display = 'block';\n        } else {\n            // Show existing reviews\n            appState.existingReviewPeriods.forEach(period => {\n                const reviewItem = ReviewManager.createReviewItem(period);\n                reviewsList.appendChild(reviewItem);\n            });\n            \n            // Add button at top-right\n            domElements.addReviewBtn.textContent = '+ Add Review';\n            domElements.addReviewBtn.style.margin = '0';\n            domElements.addReviewBtn.style.float = 'right';\n            domElements.addReviewBtn.style.marginBottom = '20px';\n        }\n    }\n\n    // Create a review item element\n    static createReviewItem(period) {\n        const reviewItem = document.createElement('div');\n        reviewItem.className = 'review-item';\n        reviewItem.style.display = 'flex';\n        reviewItem.style.justifyContent = 'space-between';\n        reviewItem.style.alignItems = 'center';\n        reviewItem.style.padding = '10px';\n        reviewItem.style.margin = '10px 0';\n        reviewItem.style.border = '1px solid #ddd';\n        reviewItem.style.borderRadius = '5px';\n        reviewItem.style.backgroundColor = '#f9f9f9';\n        \n        reviewItem.innerHTML = `\n            <div>\n                <div class=\"review-period\" style=\"font-weight: bold;\">${period.startDate} - ${period.endDate}</div>\n                <div class=\"review-info\" style=\"color: #666; font-size: 0.9em;\">${period.raterType} | ${DateUtils.formatDateCompact(new Date(period.timestamp))}</div>\n            </div>\n            <button onclick=\"ReviewManager.viewReviewDetails('${period.periodId || period.timestamp}')\" class=\"btn-secondary compact-btn\" style=\"padding: 5px 10px; background-color: #007bff; color: white; border: none; border-radius: 3px; cursor: pointer;\">View</button>\n        `;\n        \n        return reviewItem;\n    }\n\n    // View review details\n    static viewReviewDetails(periodId) {\n        // This function can be enhanced later to show detailed review information\n        console.log('Viewing details for period:', periodId);\n        // For now, just alert the user\n        alert('Review details viewing will be implemented in the next update.');\n    }\n}\n\n// Export the ReviewManager class\nexport { ReviewManager };\n\n// For backward compatibility (can be removed later)\nwindow.ReviewManager = ReviewManager;\n","// Officer Rating Management Module\nclass OfficerRatingManager {\n    // Initialize officer rating screen with both mentor and officer sections\n    static async initializeOfficerRatingScreen() {\n        try {\n            // Start loading immediately\n            UIUtils.showLoading('Loading rating data...');\n            \n            // Show the officer sections but keep them hidden initially\n            const officerDashboard = document.getElementById('officerDashboard');\n            const mentorSection = document.getElementById('mentorRatingsSection');\n            const officerSection = document.getElementById('officerRatingsSection');\n            \n            // Show the officer dashboard container\n            if (officerDashboard) officerDashboard.style.display = 'block';\n            \n            // Hide the regular rating form and review period display\n            domElements.ratingForm.style.display = 'none';\n            domElements.reviewPeriodDisplay.style.display = 'none';\n            \n            // Fetch both mentor and officer data in parallel\n            const [mentorResult, officerResult] = await Promise.allSettled([\n                OfficerRatingManager.setupMentorRatingsSection(),\n                OfficerRatingManager.setupOfficerRatingsSection()\n            ]);\n            \n            // Show the sections only after data is loaded\n            if (mentorSection) mentorSection.style.display = 'block';\n            if (officerSection) officerSection.style.display = 'block';\n            \n            // Hide loading after everything is complete\n            UIUtils.hideLoading();\n            \n            // Log any errors that occurred during setup\n            if (mentorResult.status === 'rejected') {\n                console.error('Error setting up mentor section:', mentorResult.reason);\n            }\n            if (officerResult.status === 'rejected') {\n                console.error('Error setting up officer section:', officerResult.reason);\n            }\n            \n        } catch (error) {\n            console.error('Error initializing officer rating screen:', error);\n            UIUtils.hideLoading();\n            UIUtils.showError(document.body, 'Failed to load rating data');\n        }\n    }\n    \n    // Setup mentor ratings section\n    static async setupMentorRatingsSection() {\n        try {\n            // Fetch mentor review periods\n            const mentorPeriods = await OfficerRatingManager.fetchReviewPeriods('mentor');\n            \n            // Create controls for mentor section (view-only, no add button)\n            const mentorControlsContainer = document.getElementById('mentorRatingControls');\n            if (mentorControlsContainer) {\n                mentorControlsContainer.innerHTML = '';\n                const controls = OfficerRatingManager.createViewOnlyControls(\n                    mentorPeriods, \n                    'mentor',\n                    'mentorRatingDisplay'\n                );\n                mentorControlsContainer.appendChild(controls);\n            }\n            \n            // Display the most recent mentor rating if available\n            const mentorDisplay = document.getElementById('mentorRatingDisplay');\n            if (mentorPeriods.length > 0 && mentorDisplay) {\n                // Set the displayed period for mentor section\n                appState.setMentorDisplayedPeriod(mentorPeriods[0]);\n                await OfficerRatingManager.displayRatingForSection(mentorPeriods[0], 'mentor', 'mentorRatingDisplay', false);\n            } else if (mentorDisplay) {\n                mentorDisplay.innerHTML = '<p style=\"color: #666; font-style: italic;\">No mentor ratings found for this TA</p>';\n            }\n            \n        } catch (error) {\n            console.error('Error setting up mentor ratings section:', error);\n        }\n    }\n    \n    // Setup officer ratings section\n    static async setupOfficerRatingsSection() {\n        try {\n            // Fetch officer review periods\n            const officerPeriods = await OfficerRatingManager.fetchReviewPeriods('officer');\n            \n            // Create controls for officer section\n            const officerControlsContainer = document.getElementById('officerRatingControls');\n            if (officerControlsContainer) {\n                officerControlsContainer.innerHTML = '';\n                const controls = OfficerRatingManager.createSectionControls(\n                    officerPeriods, \n                    'officer',\n                    'officerRatingDisplay'\n                );\n                officerControlsContainer.appendChild(controls);\n            }\n            \n            // Display the most recent officer rating if available\n            const officerDisplay = document.getElementById('officerRatingDisplay');\n            if (officerPeriods.length > 0 && officerDisplay) {\n                // Set the displayed period for officer section\n                appState.setOfficerDisplayedPeriod(officerPeriods[0]);\n                await OfficerRatingManager.displayRatingForSection(officerPeriods[0], 'officer', 'officerRatingDisplay', false);\n            } else if (officerDisplay) {\n                officerDisplay.innerHTML = '<p style=\"color: #666; font-style: italic;\">No officer ratings found for this TA</p>';\n            }\n            \n        } catch (error) {\n            console.error('Error setting up officer ratings section:', error);\n        }\n    }\n    \n    // Fetch review periods for a specific user type\n    static async fetchReviewPeriods(userType) {\n        try {\n            const response = await fetch(`${CONFIG.apiUrl}?action=getReviewPeriods&taId=${appState.selectedTAId}&raterType=${userType}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch review periods');\n            }\n            \n            const data = await response.json();\n            \n            // Normalize date formats for all periods\n            const normalizedPeriods = (data.periods || []).map(period => ({\n                ...period,\n                startDate: DateUtils.formatDateStringCompact(period.startDate),\n                endDate: DateUtils.formatDateStringCompact(period.endDate)\n            }));\n            \n            return normalizedPeriods;\n            \n        } catch (error) {\n            console.error(`Error fetching ${userType} review periods:`, error);\n            return [];\n        }\n    }\n    \n    // Create controls (dropdown + add button) for a section\n    static createSectionControls(periods, userType, displayElementId) {\n        const controlsContainer = document.createElement('div');\n        controlsContainer.className = 'rating-controls';\n        controlsContainer.style.display = 'flex';\n        controlsContainer.style.alignItems = 'center';\n        controlsContainer.style.gap = '10px';\n        \n        // Create dropdown for existing periods\n        if (periods.length > 0) {\n            // Get currently displayed period to filter out from dropdown options\n            const currentDisplayedPeriod = appState.getCurrentDisplayedPeriodForSection(userType);\n            \n            // Filter out the currently displayed period from dropdown options\n            const filteredPeriods = periods.filter(period => {\n                if (!currentDisplayedPeriod) return true;\n                const isCurrentPeriod = period.startDate === currentDisplayedPeriod.startDate && \n                        period.endDate === currentDisplayedPeriod.endDate;\n                return !isCurrentPeriod;\n            });\n            \n            const dropdownOptions = filteredPeriods.map(period => ({\n                text: `${period.startDate} - ${period.endDate}`,\n                value: period\n            }));\n            \n            // Determine button text - show currently displayed period if available\n            let buttonText;\n            if (currentDisplayedPeriod) {\n                buttonText = `${currentDisplayedPeriod.startDate} - ${currentDisplayedPeriod.endDate}`;\n            } else if (periods.length > 0) {\n                buttonText = `${periods[0].startDate} - ${periods[0].endDate}`;\n            } else {\n                buttonText = 'No rating periods available';\n            }\n            \n            // Add arrow only if there are dropdown options to select\n            if (dropdownOptions.length > 0) {\n                buttonText += ' ▼';\n            }\n\n            // Disable dropdown if total periods <= 1 or no alternatives to select\n            const shouldDisableDropdown = periods.length <= 1 || filteredPeriods.length === 0;\n\n            const dropdown = UIUtils.createDropdown(\n                dropdownOptions,\n                (option) => OfficerRatingManager.displayRatingForSection(option.value, userType, displayElementId),\n                buttonText,\n                shouldDisableDropdown\n            );\n            \n            dropdown.container.style.maxWidth = '250px';\n            dropdown.container.style.flexShrink = '1';\n            controlsContainer.appendChild(dropdown.container);\n        }\n        \n        // Create Add New Rating button\n        const addButton = document.createElement('button');\n        addButton.type = 'button';\n        addButton.className = 'compact-btn';\n        addButton.textContent = '+ Rating';\n        addButton.style.whiteSpace = 'nowrap';\n        \n        addButton.addEventListener('click', () => {\n            // Officers only add ratings as officers, no need to change user type\n            ScreenManager.showDateRangeModal();\n        });\n        \n        controlsContainer.appendChild(addButton);\n        \n        return controlsContainer;\n    }\n    \n    // Create view-only controls (dropdown only, no add button) for mentor section\n    static createViewOnlyControls(periods, userType, displayElementId) {\n        const controlsContainer = document.createElement('div');\n        controlsContainer.className = 'rating-controls';\n        controlsContainer.style.display = 'flex';\n        controlsContainer.style.alignItems = 'center';\n        controlsContainer.style.gap = '10px';\n        \n        // Create dropdown for existing periods\n        if (periods.length > 0) {\n            // Get currently displayed period to filter out from dropdown options\n            const currentDisplayedPeriod = appState.getCurrentDisplayedPeriodForSection(userType);\n            \n            // Filter out the currently displayed period from dropdown options\n            const filteredPeriods = periods.filter(period => {\n                if (!currentDisplayedPeriod) return true;\n                const isCurrentPeriod = period.startDate === currentDisplayedPeriod.startDate && \n                        period.endDate === currentDisplayedPeriod.endDate;\n                return !isCurrentPeriod;\n            });\n            \n            const dropdownOptions = filteredPeriods.map(period => ({\n                text: `${period.startDate} - ${period.endDate}`,\n                value: period\n            }));\n            \n            // Determine button text - show currently displayed period if available\n            let buttonText;\n            if (currentDisplayedPeriod) {\n                buttonText = `${currentDisplayedPeriod.startDate} - ${currentDisplayedPeriod.endDate}`;\n            } else if (periods.length > 0) {\n                buttonText = `${periods[0].startDate} - ${periods[0].endDate}`;\n            } else {\n                buttonText = 'No rating periods available';\n            }\n            \n            // Add arrow only if there are dropdown options to select\n            if (dropdownOptions.length > 0) {\n                buttonText += ' ▼';\n            }\n\n            // Disable dropdown if total periods <= 1 or no alternatives to select\n            const shouldDisableDropdown = periods.length <= 1 || filteredPeriods.length === 0;\n\n            const dropdown = UIUtils.createDropdown(\n                dropdownOptions,\n                (option) => OfficerRatingManager.displayRatingForSection(option.value, userType, displayElementId),\n                buttonText,\n                shouldDisableDropdown\n            );\n            \n            dropdown.container.style.maxWidth = '250px';\n            dropdown.container.style.flexShrink = '1';\n            controlsContainer.appendChild(dropdown.container);\n        } else {\n            // If no periods, show a message\n            const noDataMessage = document.createElement('span');\n            noDataMessage.textContent = 'No mentor ratings available';\n            noDataMessage.style.color = '#666';\n            noDataMessage.style.fontStyle = 'italic';\n            controlsContainer.appendChild(noDataMessage);\n        }\n        \n        return controlsContainer;\n    }\n    \n    // Display rating for a specific section\n    static async displayRatingForSection(period, userType, displayElementId, showLoading = true) {\n        try {\n            const displayElement = document.getElementById(displayElementId);\n            if (!displayElement) return;\n            \n            if (showLoading) {\n                UIUtils.showLoading('Loading rating data...');\n            }\n            \n            // Set the currently displayed period for this section\n            if (userType === 'mentor') {\n                appState.setMentorDisplayedPeriod(period);\n            } else if (userType === 'officer') {\n                appState.setOfficerDisplayedPeriod(period);\n            }\n            \n            // Refresh the section's dropdown to exclude the currently displayed period\n            OfficerRatingManager.refreshSectionDropdown(userType);\n\n            // Fetch all ratings for this TA\n            const response = await fetch(`${CONFIG.apiUrl}?action=getTARatings&taId=${appState.selectedTAId}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch ratings');\n            }\n\n            const data = await response.json();\n\n            // Normalize the rating dates for comparison\n            const normalizedRatings = data.ratings.map(rating => ({\n                ...rating,\n                startDate: DateUtils.formatDateStringCompact(rating.startDate),\n                endDate: DateUtils.formatDateStringCompact(rating.endDate)\n            }));\n\n            // Find the specific rating for this period and user type\n            const periodRating = normalizedRatings.find(rating => \n                rating.raterType === userType &&\n                rating.startDate === period.startDate &&\n                rating.endDate === period.endDate\n            );\n\n            if (periodRating) {\n                // Display existing rating data\n                displayElement.innerHTML = OfficerRatingManager.createRatingDisplayHTML(periodRating);\n            } else {\n                // No rating found for this period\n                displayElement.innerHTML = `\n                    <div style=\"padding: 15px; text-align: center; color: #666; font-style: italic;\">\n                        No rating found for period: ${period.startDate} - ${period.endDate}\n                    </div>\n                `;\n            }\n\n            if (showLoading) {\n                UIUtils.hideLoading();\n            }\n\n        } catch (error) {\n            console.error('Error loading rating data:', error);\n            if (showLoading) {\n                UIUtils.hideLoading();\n            }\n\n            const displayElement = document.getElementById(displayElementId);\n            if (displayElement) {\n                displayElement.innerHTML = `\n                    <div style=\"padding: 15px; text-align: center; color: #dc3545;\">\n                        Error loading rating data for period: ${period.startDate} - ${period.endDate}\n                    </div>\n                `;\n            }\n        }\n    }\n    \n    // Refresh dropdown for a specific section to exclude currently displayed period\n    static refreshSectionDropdown(userType) {\n        const controlsId = userType === 'mentor' ? 'mentorRatingControls' : 'officerRatingControls';\n        const displayElementId = userType === 'mentor' ? 'mentorRatingDisplay' : 'officerRatingDisplay';\n        const controlsContainer = document.getElementById(controlsId);\n        \n        if (!controlsContainer) return;\n        \n        // Get the existing dropdown container\n        const existingDropdown = controlsContainer.querySelector('.dropdown-container');\n        if (!existingDropdown) return;\n        \n        // Get periods for this user type (we need to fetch them again)\n        OfficerRatingManager.fetchReviewPeriods(userType).then(periods => {\n            const currentDisplayedPeriod = appState.getCurrentDisplayedPeriodForSection(userType);\n            \n            // Filter out the currently displayed period\n            const filteredPeriods = periods.filter(period => {\n                if (!currentDisplayedPeriod) return true;\n                const isCurrentPeriod = period.startDate === currentDisplayedPeriod.startDate && \n                        period.endDate === currentDisplayedPeriod.endDate;\n                return !isCurrentPeriod;\n            });\n            \n            // Create updated dropdown options\n            const dropdownOptions = filteredPeriods.map(period => ({\n                text: `${period.startDate} - ${period.endDate}`,\n                value: period\n            }));\n            \n            // Determine button text - show currently displayed period\n            let buttonText;\n            if (currentDisplayedPeriod) {\n                buttonText = `${currentDisplayedPeriod.startDate} - ${currentDisplayedPeriod.endDate}`;\n            } else {\n                buttonText = dropdownOptions.length > 0 ? 'Select a rating period' : 'No rating periods available';\n            }\n            \n            // Add arrow only if there are dropdown options to select\n            if (dropdownOptions.length > 0) {\n                buttonText += ' ▼';\n            }\n            \n            // Check if we should disable dropdown (total periods <= 1 or no alternatives)\n            const shouldDisableDropdown = periods.length <= 1 || filteredPeriods.length === 0;\n            \n            const newDropdown = UIUtils.createDropdown(\n                dropdownOptions,\n                (option) => OfficerRatingManager.displayRatingForSection(option.value, userType, displayElementId),\n                buttonText,\n                shouldDisableDropdown\n            );\n            \n            // Apply same styling\n            newDropdown.container.style.maxWidth = '250px';\n            newDropdown.container.style.flexShrink = '1';\n            \n            // Replace the old dropdown\n            existingDropdown.parentNode.replaceChild(newDropdown.container, existingDropdown);\n        });\n    }\n    \n    // Create modern rating display for officer sections\n    static createRatingDisplayHTML(rating) {\n        const ratingDate = DateUtils.formatDateCompact(new Date(rating.timestamp));\n        \n        // Create rater info object for modern display\n        const raterInfo = {\n            name: rating.raterName,\n            type: rating.raterType,\n            date: ratingDate\n        };\n        \n        // Create modern rating display using UIUtils\n        const modernDisplay = UIUtils.createModernRatingDisplay(rating, raterInfo, RATING_CATEGORIES, rating.comments);\n        \n        // Add period information to the rating info header\n        const infoHeader = modernDisplay.querySelector('.rating-info-header');\n        // if (infoHeader && rating.startDate && rating.endDate) {\n        //     const periodRow = document.createElement('div');\n        //     periodRow.className = 'info-row';\n            \n        //     const periodLabel = document.createElement('span');\n        //     periodLabel.className = 'info-label';\n        //     periodLabel.textContent = 'PERIOD:';\n            \n        //     const periodValue = document.createElement('span');\n        //     periodValue.className = 'info-value';\n        //     periodValue.textContent = `${rating.startDate} - ${rating.endDate}`;\n            \n        //     periodRow.appendChild(periodLabel);\n        //     periodRow.appendChild(periodValue);\n        //     infoHeader.appendChild(periodRow);\n        // }\n        \n        // Note: Comments are now included in the modern display, no need to add separately\n        \n        return modernDisplay.outerHTML;\n    }\n    \n    // Reset sections when switching TAs or showing new rating screen\n    static resetSections() {\n        const officerDashboard = document.getElementById('officerDashboard');\n        const mentorSection = document.getElementById('mentorRatingsSection');\n        const officerSection = document.getElementById('officerRatingsSection');\n        \n        // Use important to override CSS !important rules\n        if (officerDashboard) {\n            officerDashboard.style.setProperty('display', 'none', 'important');\n        }\n        if (mentorSection) {\n            mentorSection.style.setProperty('display', 'none', 'important');\n        }\n        if (officerSection) {\n            officerSection.style.setProperty('display', 'none', 'important');\n        }\n        \n        // Clear section contents\n        const mentorControls = document.getElementById('mentorRatingControls');\n        const mentorDisplay = document.getElementById('mentorRatingDisplay');\n        const officerControls = document.getElementById('officerRatingControls');\n        const officerDisplay = document.getElementById('officerRatingDisplay');\n        \n        if (mentorControls) mentorControls.innerHTML = '';\n        if (mentorDisplay) mentorDisplay.innerHTML = '';\n        if (officerControls) officerControls.innerHTML = '';\n        if (officerDisplay) officerDisplay.innerHTML = '';\n        \n        // Clear currently displayed periods for officer sections\n        appState.currentMentorDisplayedPeriod = null;\n        appState.currentOfficerDisplayedPeriod = null;\n    }\n}\n\n// Export the OfficerRatingManager class\nexport { OfficerRatingManager };\n\n// For backward compatibility (can be removed later)\nwindow.OfficerRatingManager = OfficerRatingManager;\n","// Event Handlers Module\nclass EventHandlers {\n    // Initialize all event listeners\n    static initialize() {\n        EventHandlers.setupLoginHandlers();\n        EventHandlers.setupTASelectionHandlers();\n        EventHandlers.setupRatingHandlers();\n        EventHandlers.setupNavigationHandlers();\n        EventHandlers.setupDateRangeHandlers();\n        EventHandlers.setupUserDropdowns();\n    }\n\n    // Setup login form handlers\n    static setupLoginHandlers() {\n        domElements.loginForm.addEventListener('submit', async function(e) {\n            e.preventDefault();\n            \n            // Reset errors\n            domElements.resetErrors();\n            \n            // Get input values\n            const phone = domElements.phoneInput.value.trim();\n            const password = domElements.passwordInput.value.trim();\n            \n            // Basic validation\n            const validationFields = [\n                {\n                    value: phone,\n                    errorElement: domElements.phoneError,\n                    message: 'Phone number is required'\n                },\n                {\n                    value: password,\n                    errorElement: domElements.passwordError,\n                    message: 'Password is required'\n                }\n            ];\n\n            if (!UIUtils.validateRequiredFields(validationFields)) {\n                return;\n            }\n            \n            // Attempt login\n            const result = await AuthManager.handleLogin(phone, password);\n            \n            if (result.success) {\n                ScreenManager.showTASelection();\n            } else {\n                UIUtils.showError(domElements.loginError, result.message);\n            }\n        });\n    }\n\n    // Setup TA selection handlers\n    static setupTASelectionHandlers() {\n        domElements.proceedToRatingBtn.addEventListener('click', async function() {\n            if (TAManager.handleTASelection()) {\n                await ScreenManager.showRatingScreenWithPreviousData();\n            }\n        });\n    }\n\n    // Setup rating form handlers\n    static setupRatingHandlers() {\n        domElements.ratingForm.addEventListener('submit', async function(e) {\n            e.preventDefault();\n            \n            // Reset error\n            UIUtils.hideError(domElements.ratingError);\n            \n            // Get form data\n            const formData = new FormData(domElements.ratingForm);\n            \n            // Handle rating submission\n            await RatingManager.handleRatingSubmission(formData);\n        });\n    }\n\n    // Setup navigation handlers\n    static setupNavigationHandlers() {\n        // Logout buttons\n        [domElements.logoutButton, domElements.logoutButton2, domElements.logoutButton3, domElements.globalLogoutBtn].forEach(button => {\n            if (button) {\n                button.addEventListener('click', AuthManager.logout);\n            }\n        });\n\n        // Back to selection button\n        if (domElements.backToSelectionBtn) {\n            domElements.backToSelectionBtn.addEventListener('click', function() {\n                UIUtils.hideError(domElements.ratingError);\n                RatingManager.clearValidationErrors();\n                ScreenManager.showTASelection();\n                UIUtils.resetForm(domElements.ratingForm);\n            });\n        }\n\n        // Rate another button\n        if (domElements.rateAnotherBtn) {\n            domElements.rateAnotherBtn.addEventListener('click', function() {\n                RatingManager.clearValidationErrors();\n                UIUtils.resetForm(domElements.ratingForm);\n                ScreenManager.showTASelection();\n            });\n        }\n    }\n\n    // Setup date range handlers\n    static setupDateRangeHandlers() {\n        // Add review button\n        if (domElements.addReviewBtn) {\n            domElements.addReviewBtn.addEventListener('click', ScreenManager.showDateRangeModal);\n        }\n\n        // Proceed with dates button\n        if (domElements.proceedWithDatesBtn) {\n            domElements.proceedWithDatesBtn.addEventListener('click', function() {\n                if (DateUtils.validateDateRange()) {\n                    // Use compact format (DD/MM/YY) for date range\n                    appState.setDateRange(domElements.startDateInput.value, domElements.endDateInput.value);\n                    \n                    // Hide modal and show rating screen\n                    ScreenManager.closeDateRangeModal();\n                    ScreenManager.showRatingScreenWithDateRange();\n                }\n            });\n        }\n\n        // Setup date input change handlers\n        DateUtils.setupDateInputHandlers();\n    }\n\n    // Setup user dropdown handlers\n    static setupUserDropdowns() {\n        // Get all user dropdown triggers\n        const dropdownTriggers = document.querySelectorAll('.user-dropdown-trigger');\n        \n        dropdownTriggers.forEach(trigger => {\n            const dropdown = trigger.closest('.user-dropdown');\n            const menu = dropdown.querySelector('.user-dropdown-menu');\n            \n            // Toggle dropdown on click\n            trigger.addEventListener('click', function(e) {\n                e.stopPropagation();\n                \n                // Close other dropdowns\n                document.querySelectorAll('.user-dropdown.open').forEach(otherDropdown => {\n                    if (otherDropdown !== dropdown) {\n                        otherDropdown.classList.remove('open');\n                    }\n                });\n                \n                // Toggle current dropdown\n                dropdown.classList.toggle('open');\n            });\n        });\n        \n        // Close dropdowns when clicking outside\n        document.addEventListener('click', function() {\n            document.querySelectorAll('.user-dropdown.open').forEach(dropdown => {\n                dropdown.classList.remove('open');\n            });\n        });\n        \n        // Prevent dropdown from closing when clicking inside menu\n        document.querySelectorAll('.user-dropdown-menu').forEach(menu => {\n            menu.addEventListener('click', function(e) {\n                e.stopPropagation();\n            });\n        });\n    }\n\n    // Update user info in all dropdowns\n    static updateUserInfo(userName, userRole) {\n        // Update all user name and role elements\n        document.querySelectorAll('.user-name').forEach(element => {\n            if (element.id.startsWith('userName')) {\n                element.textContent = userName;\n            }\n        });\n        \n        document.querySelectorAll('.user-role').forEach(element => {\n            if (element.id.startsWith('userRole')) {\n                element.textContent = userRole;\n            }\n        });\n    }\n}\n\n\n// Export the EventHandlers class\nexport { EventHandlers };\n\n// For backward compatibility (can be removed later)\nwindow.EventHandlers = EventHandlers;\n","// Main Application Entry Point\nclass App {\n    // Initialize the application\n    static async initialize() {\n        console.log('Initializing TA Rating System...');\n        \n        // Initialize event handlers\n        EventHandlers.initialize();\n        \n        // Check for existing session and show appropriate screen\n        await AuthManager.checkExistingSession();\n        \n        console.log('Application initialized successfully');\n    }\n}\n\n// Global wrapper functions for HTML onclick attributes\nwindow.closeDateRangeModal = function() {\n    ScreenManager.closeDateRangeModal();\n};\n\nwindow.showTASelection = function() {\n    ScreenManager.showTASelection();\n};\n\nwindow.logout = function() {\n    AuthManager.logout();\n};\n\n// Export the App class\nexport { App };\n\n// For backward compatibility (can be removed later)\nwindow.App = App;\n","// Main Application Entry Point\nimport { CONFIG, MOCK_DATA, RATING_CATEGORIES } from './config.js';\nimport { appState } from './state.js';\nimport { domElements } from './dom-elements.js';\nimport { UIUtils } from './ui-utils.js';\nimport { DateUtils } from './date-utils.js';\nimport { APIService } from './api-service.js';\nimport { AuthManager } from './auth-manager.js';\nimport { TAManager } from './ta-manager.js';\nimport { RatingManager } from './rating-manager.js';\nimport { ReviewManager } from './review-manager.js';\nimport { OfficerRatingManager } from './officer-rating-manager.js';\nimport { ScreenManager } from './screen-manager.js';\nimport { EventHandlers } from './event-handlers.js';\nimport { App } from './app.js';\n\n// Import development automation (only in dev mode)\n// import { DevAutomation } from './dev-automation.js';\n\n// Import CSS\n import '../styles/index.css';\n// import '../css/dev-automation.css';\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('DOM loaded, initializing application...');\n    App.initialize();\n});\n\n// Hot Module Replacement for development\nif (import.meta.hot) {\n  import.meta.hot.accept('./app.js', (newModule) => {\n    console.log('Hot reloading app.js');\n    if (newModule?.App) {\n      newModule.App.initialize();\n    }\n  });\n  \n  import.meta.hot.accept('../styles/index.css', () => {\n    console.log('Hot reloading styles');\n  });\n}\n"],"names":["window","CONFIG","apiUrl","MINIMUM_REVIEW_PERIOD_DAYS","DATE_FORMAT","MINIMUM_DATE","MOCK_DATA","users","phoneNumber","password","userType","name","tas","taId","department","RATING_CATEGORIES","key","label","appState","constructor","this","taList","currentUserType","currentUserPhone","currentUserName","selectedTAId","selectedTAName","selectedStartDate","selectedEndDate","existingReviewPeriods","currentDisplayedPeriod","currentMentorDisplayedPeriod","currentOfficerDisplayedPeriod","dataLoaded","setCurrentUser","phone","type","getCurrentUser","setSelectedTA","id","getSelectedTA","setDateRange","startDate","endDate","formatDateForStorage","dateInput","date","dateStr","String","trim","match","Date","includes","parts","split","length","year","parseInt","isNaN","getTime","day","getDate","padStart","month","getMonth","getFullYear","slice","concat","getDateRange","saveToSession","sessionStorage","setItem","loadFromSession","isLoggedIn","getItem","clearSession","removeItem","reset","clearDisplayedPeriod","setMentorDisplayedPeriod","period","setOfficerDisplayedPeriod","getCurrentDisplayedPeriodForSection","domElements","initializeElements","loginForm","document","getElementById","phoneInput","passwordInput","phoneError","passwordError","loginError","loginContainer","taSelectionContainer","ratingContainer","confirmationContainer","reviewManagementContainer","dateRangeModal","mainHeader","globalUserName","globalUserRole","globalLogoutBtn","navBreadcrumb","userDisplayName","userDisplayName2","userDisplayName3","userDisplayName4","taSelect","taSelectError","proceedToRatingBtn","selectedTANameDisplay","ratingForm","ratingError","logoutButton","logoutButton2","logoutButton3","backToSelectionBtn","rateAnotherBtn","loadingOverlay","startDateInput","endDateInput","dateRangeError","addReviewBtn","proceedWithDatesBtn","existingReviewsList","reviewManagementTAName","reviewPeriodDisplay","hideAllContainers","style","display","resetErrors","updateUserDisplays","userInfo","forEach","element","textContent","role","showHeader","hideHeader","updateBreadcrumb","text","innerHTML","showError","message","errorText","querySelector","classList","add","hideError","remove","setBodyStyle","className","styles","body","Object","assign","ReviewManager","displayExistingReviews","reviewsList","margin","reviewItem","createReviewItem","appendChild","float","marginBottom","createElement","justifyContent","alignItems","padding","border","borderRadius","backgroundColor","raterType","formatDateCompact","timestamp","periodId","viewReviewDetails","alert","OfficerRatingManager","initializeOfficerRatingScreen","UIUtils","showLoading","officerDashboard","mentorSection","officerSection","mentorResult","officerResult","Promise","allSettled","setupMentorRatingsSection","setupOfficerRatingsSection","hideLoading","status","error","mentorPeriods","fetchReviewPeriods","mentorControlsContainer","controls","createViewOnlyControls","mentorDisplay","displayRatingForSection","officerPeriods","officerControlsContainer","createSectionControls","officerDisplay","response","fetch","ok","Error","data","json","periods","map","DateUtils","formatDateStringCompact","displayElementId","controlsContainer","gap","filteredPeriods","filter","dropdownOptions","value","buttonText","shouldDisableDropdown","dropdown","createDropdown","option","container","maxWidth","flexShrink","addButton","whiteSpace","addEventListener","ScreenManager","showDateRangeModal","noDataMessage","color","fontStyle","displayElement","refreshSectionDropdown","periodRating","ratings","rating","find","createRatingDisplayHTML","controlsId","existingDropdown","then","newDropdown","parentNode","replaceChild","ratingDate","raterInfo","raterName","modernDisplay","createModernRatingDisplay","comments","outerHTML","resetSections","setProperty","mentorControls","officerControls","EventHandlers","initialize","setupLoginHandlers","setupTASelectionHandlers","setupRatingHandlers","setupNavigationHandlers","setupDateRangeHandlers","setupUserDropdowns","async","e","preventDefault","validationFields","errorElement","validateRequiredFields","result","AuthManager","handleLogin","success","showTASelection","TAManager","handleTASelection","showRatingScreenWithPreviousData","formData","FormData","RatingManager","handleRatingSubmission","button","logout","clearValidationErrors","resetForm","validateDateRange","closeDateRangeModal","showRatingScreenWithDateRange","setupDateInputHandlers","querySelectorAll","trigger","closest","stopPropagation","otherDropdown","toggle","menu","updateUserInfo","userName","userRole","startsWith","App","checkExistingSession"],"mappings":"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"}